{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":false},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"source/CNAME","path":"CNAME","modified":true}],"Cache":[{"_id":"scaffolds/page.md","mtime":1409120042000},{"_id":"scaffolds/draft.md","mtime":1409120042000},{"_id":"scaffolds/photo.md","mtime":1409120042000},{"_id":"scaffolds/post.md","mtime":1409120042000},{"_id":"themes/landscape/LICENSE","mtime":1409120042000},{"_id":"themes/landscape/Gruntfile.js","mtime":1409120042000},{"_id":"themes/landscape/README.md","mtime":1409120042000},{"_id":"themes/landscape/_config.yml","mtime":1409120042000},{"_id":"themes/landscape/package.json","mtime":1409120042000},{"_id":"themes/landscape/scripts/fancybox.js","mtime":1409120042000},{"_id":"themes/landscape/layout/archive.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/category.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/index.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/layout.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/page.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/post.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/tag.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_widget/archive.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_widget/category.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_widget/tag.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_partial/archive.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_partial/article.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_partial/footer.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_partial/head.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_partial/header.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","mtime":1409120042000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","mtime":1409120042000},{"_id":"themes/landscape/source/js/script.js","mtime":1409120042000},{"_id":"themes/landscape/source/css/_extend.styl","mtime":1409120042000},{"_id":"themes/landscape/source/css/_variables.styl","mtime":1409120042000},{"_id":"themes/landscape/source/css/style.styl","mtime":1409120042000},{"_id":"themes/landscape/source/css/_partial/archive.styl","mtime":1409120042000},{"_id":"themes/landscape/source/css/_partial/article.styl","mtime":1409120042000},{"_id":"themes/landscape/source/css/_partial/comment.styl","mtime":1409120042000},{"_id":"themes/landscape/source/css/_partial/footer.styl","mtime":1409120042000},{"_id":"themes/landscape/source/css/_partial/header.styl","mtime":1409120042000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","mtime":1409120042000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","mtime":1409120042000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","mtime":1409120042000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","mtime":1409120042000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","mtime":1409120042000},{"_id":"themes/landscape/source/css/_util/grid.styl","mtime":1409120042000},{"_id":"themes/landscape/source/css/_util/mixin.styl","mtime":1409120042000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","mtime":1409120042000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","mtime":1409120042000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","mtime":1409120042000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","mtime":1409120042000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","mtime":1409120042000},{"_id":"themes/landscape/source/css/images/banner.jpg","mtime":1409120042000},{"_id":"themes/landscape/source/fancybox/blank.gif","mtime":1409120042000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","mtime":1409120042000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","mtime":1409120042000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","mtime":1409120042000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","mtime":1409120042000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","mtime":1409120042000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","mtime":1409120042000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","mtime":1409120042000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","mtime":1409120042000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","mtime":1409120042000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1409120042000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1409120042000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1409120042000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1409120042000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1409120042000},{"_id":"source/_posts/2013-12-05-ru-he-rang-uitableviewcell-zhong-de-imageview-da-xiao-gu-ding.md","mtime":1386313236000},{"_id":"source/_posts/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian.md","mtime":1386554212000},{"_id":"source/_posts/2013-12-10-ge-ren-zong-jie-de-yi-xie-app-de-dai-ma-shi-jian.md","mtime":1386730934000},{"_id":"source/_posts/2013-12-10-ru-he-cong-duo-zhong-modalviewcontroller-zhong-zhi-jie-fan-hui-zui-di-ceng.md","mtime":1386753090000},{"_id":"source/_posts/2013-12-11-jie-jue-biao-dan-bei-jian-pan-zhe-zhu-de-wen-ti.md","mtime":1386737804000},{"_id":"source/_posts/2013-12-12-wan-mei-jie-jue-interactivepopgesturerecognizer-qia-zhu-de-wen-ti.md","mtime":1386837738000},{"_id":"source/_posts/2013-12-19-jie-jue-biao-dan-bei-jian-pan-zhe-zhu-de-wen-ti-xu.md","mtime":1387442155000},{"_id":"source/_posts/2013-12-31-kai-yuan-xiang-mu-mmspinimageview-yong-yu-360-du-xian-shi-huan-pai-wu-ti.md","mtime":1388467862000},{"_id":"source/_posts/2014-08-21-kai-yuan-xiang-mu-mmplaceholder.md","mtime":1408605215000},{"_id":"source/_posts/2014-08-26-ru-he-kuai-su-de-shan-chu-imessageli-de-xin-xi.md","mtime":1409018523000},{"_id":"source/CNAME","mtime":1409120423000}],"Category":[{"name":"技巧心得","_id":"uik4bvz6gsyceazg","posts":["j3dauz9g4m7fnhea","b7ymd3ssgwpfus9q","gq7r01yxncpvuyzk","3gwnuiskbw3anxod","k5ywp3etn93ok4l6","7azo9zptcg5ny3fx"]},{"name":"开源项目","_id":"yodrozp745kl5k57","posts":["22sw9o7mw2hvatve"]}],"Page":[],"Post":[{"layout":"post","title":"如何让 UITableViewCell 中的 imageView 大小固定","date":1386232899000,"comments":true,"categories":["uik4bvz6gsyceazg"],"content":"<p><code>UITableView</code>可以算是使用频率最高的组件之一的,在开发过程中经常需要展示一些简单的信息列表</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/433937/Blog/2013-12-06%2013.33.25.png\" alt=\"常见列表布局\"></p>\n<p>如图,很多页面其实就是这种展示结果,通常需要<code>imageView</code>,<code>textLabel</code>,<code>detailTextlabel</code>,而<code>UITableViewCell</code>本身提供了方便的自动布局(当有图片和没图片时,textLabel和detailLabel的位置会左右自动调整). 但是图片的大小却是没有办法固定的(直接设置<code>imageView.frame</code>是无法固定<code>imageView</code>的大小的),那么一般来说解决这个问题的办法有两种:</p>\n<ul>\n<li>固定显示图片的大小(包括PlaceHolder)</li>\n<li>自定义tableViewCell,添加自定义的<code>imageView</code>,<code>textLabel</code>和<code>detailTextLabel</code></li>\n</ul>\n<p>这两种方式都可以解决这个问题,但是这两种方式其实都挺麻烦的,能否直接固定imageView的大小呢? 方法是有的,只需要重载<code>layoutSubviews</code>即可</p>\n<figure class=\"highlight objc\"><figcaption><span>派生UITableViewCell</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//自定义一个Cell</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MMCell</span> : <span class=\"title\">UITableViewCell</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MMCell</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//重载layoutSubviews</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)layoutSubviews</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *img = <span class=\"keyword\">self</span><span class=\"variable\">.imageView</span><span class=\"variable\">.image</span>;</div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.imageView</span><span class=\"variable\">.image</span> = [<span class=\"built_in\">UIImage</span> imageName:<span class=\"string\">@\"res/PlaceHolder.png\"</span>];</div><div class=\"line\">    [<span class=\"keyword\">super</span> layoutSubviews];</div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.imageView</span><span class=\"variable\">.image</span> = img;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n\n\n\n<p>这样,我们只要使用<code>MMCell</code>就可以固定<code>imageView</code>的大小了,且大小为<code>PlaceHolder.png</code>的大小(一般来说这种页面都会使用一个<code>PlaceHolder.png</code>来显示默认图片).</p>\n<p>原理是在<code>UItableVeiw</code>的<code>layoutSubviews</code>调用时,会根据<code>imageView.image</code>的大小来调整<code>imageView</code>,<code>textLabel</code>,<code>detailTextLabel</code>的位置,在此之前我们先将<code>imageView.image</code>设置为<code>PlaceHolder.png</code>图片,等待重新布局完后再将原本的图片设置回去就可以了</p>\n","source":"_posts/2013-12-05-ru-he-rang-uitableviewcell-zhong-de-imageview-da-xiao-gu-ding.md","raw":"---\nlayout: post\ntitle: \"如何让 UITableViewCell 中的 imageView 大小固定\"\ndate: 2013-12-05 16:41:39 +0800\ncomments: true\ncategories: 技巧心得\n---\n\n`UITableView`可以算是使用频率最高的组件之一的,在开发过程中经常需要展示一些简单的信息列表\n\n![常见列表布局](https://dl.dropboxusercontent.com/u/433937/Blog/2013-12-06%2013.33.25.png)\n\n如图,很多页面其实就是这种展示结果,通常需要`imageView`,`textLabel`,`detailTextlabel`,而`UITableViewCell`本身提供了方便的自动布局(当有图片和没图片时,textLabel和detailLabel的位置会左右自动调整). 但是图片的大小却是没有办法固定的(直接设置`imageView.frame`是无法固定`imageView`的大小的),那么一般来说解决这个问题的办法有两种:\n\n* 固定显示图片的大小(包括PlaceHolder)\n* 自定义tableViewCell,添加自定义的`imageView`,`textLabel`和`detailTextLabel`\n\n这两种方式都可以解决这个问题,但是这两种方式其实都挺麻烦的,能否直接固定imageView的大小呢? 方法是有的,只需要重载`layoutSubviews`即可\n\n``` objc 派生UITableViewCell\n\n//自定义一个Cell\n@interface MMCell : UITableViewCell\n\n@end\n\n\n@implementation MMCell\n\n//重载layoutSubviews\n- (void)layoutSubviews\n{\n    UIImage *img = self.imageView.image;\n    self.imageView.image = [UIImage imageName:@\"res/PlaceHolder.png\"];\n    [super layoutSubviews];\n    self.imageView.image = img;\n}\n\n@end\n```\n\t\n\n这样,我们只要使用`MMCell`就可以固定`imageView`的大小了,且大小为`PlaceHolder.png`的大小(一般来说这种页面都会使用一个`PlaceHolder.png`来显示默认图片).\n\n原理是在`UItableVeiw`的`layoutSubviews`调用时,会根据`imageView.image`的大小来调整`imageView`,`textLabel`,`detailTextLabel`的位置,在此之前我们先将`imageView.image`设置为`PlaceHolder.png`图片,等待重新布局完后再将原本的图片设置回去就可以了","slug":"2013-12-05-ru-he-rang-uitableviewcell-zhong-de-imageview-da-xiao-gu-ding","updated":1386313236000,"excerpt":"","_id":"j3dauz9g4m7fnhea","tags":[],"photos":[],"link":""},{"layout":"post","title":"NimbusKit 介绍与使用实践","date":1386319888000,"comments":true,"categories":["uik4bvz6gsyceazg"],"content":"<h1 id=\"介绍\">介绍</h1>\n<p><a href=\"http://nimbuskit.info/\" target=\"_blank\" rel=\"external\">NimbusKit 官网</a><br><a href=\"https://github.com/jverkoey/nimbus\" target=\"_blank\" rel=\"external\">NimbusKit 源码</a></p>\n<p>NimbusKit是一组用于快速开发的iOS框架,是源自<em>Facebook</em>的著名框架<code>Three20</code>的替代者,包括下面几大类的功能</p>\n<ul>\n<li>Attributed Label    -   富文字Label</li>\n<li>Badge - 数字角标</li>\n<li>Interapp - 应用间交互</li>\n<li>Launcher - 类桌面启动器</li>\n<li>Network Image - 网络图片下载显示</li>\n<li>Photo Albums - 相册</li>\n<li>Web Controller - 浏览器</li>\n<li>Table Models - 表格数据模型</li>\n<li>Overview - 直观方便的调试分析内嵌图形工具</li>\n<li>等…</li>\n</ul>\n<p>NimbusKit的demo很直观,编译运行以后就可以体验其强大的功能了</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/433937/Blog/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian2.png\" alt=\"Nimbus Demo\"></p>\n<h1 id=\"使用\">使用</h1>\n<p>因为之前的项目的富文本设计要支持<code>iOS5</code>和<code>iOS6</code>,而<code>attributeString</code>特性只有iOS6支持,所以使用了<em>NIAttributedLabel</em></p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/433937/Blog/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian1.PNG\" alt=\"富文本\"></p>\n<p>这次新的项目由于有大量的表单页面,考虑到完全自己实现太耗时间,所以又重新考虑了<code>NimbusKit</code>的<code>Table Models</code></p>\n<p>NimbusKit提供的表单组件如下</p>\n<p>|| 组件                                 || 功能             ||<br>||:————————————————:||:——————:||<br>|| NIRadioGroup                     || 多选一         ||<br>|| NITextInputFormElement             || 文本输入         ||<br>|| NISwitchFormElement                 || 开关             ||<br>|| NISliderFormElement                 || 滑动条         ||<br>|| NISegmentedControlFormElement     || 分段             ||<br>|| NIDatePickerFormElement             || 时间选择        ||<br>|| NITitleCellObject                 || 单行文本         ||<br>|| NISubtitleCellObject             || 主副文本         ||<br>|| …                                 || 等其他         ||</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/433937/Blog/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian4.png\" alt=\"基础表单组件\"></p>\n<p>这里首先要介绍一下NimbusKit的Table-Modal-Action模型,先上一段简单代码</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GGJSZController</span> ()</span></div><div class=\"line\">&lt;</div><div class=\"line\"><span class=\"built_in\">UITableViewDelegate</span>,</div><div class=\"line\">UITextFieldDelegate</div><div class=\"line\">&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">UITableView</span> *tableView;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) NITableViewModel* model;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) NITableViewActions *action;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) NIActionBlock queryBlock;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">GGJSZController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)init</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) {</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">self</span><span class=\"variable\">.tableView</span> = [[<span class=\"built_in\">UITableView</span> alloc] initWithFrame:<span class=\"keyword\">self</span><span class=\"variable\">.view</span><span class=\"variable\">.bounds</span> style:UITableViewStyleGrouped];</div><div class=\"line\">        ...</div><div class=\"line\">        ...</div><div class=\"line\">        <span class=\"keyword\">self</span><span class=\"variable\">.tableView</span><span class=\"variable\">.delegate</span> = <span class=\"keyword\">self</span>;</div><div class=\"line\">        [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addSubview:<span class=\"keyword\">self</span><span class=\"variable\">.tableView</span>];</div><div class=\"line\">        </div><div class=\"line\">        [<span class=\"keyword\">self</span> configureBlock];</div><div class=\"line\">        [<span class=\"keyword\">self</span> configureForm];</div><div class=\"line\">        </div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)configureBlock</div><div class=\"line\">{</div><div class=\"line\">    __<span class=\"keyword\">weak</span> GGUserController *weakSelf = <span class=\"keyword\">self</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.queryBlock</span> = ^<span class=\"built_in\">BOOL</span>(<span class=\"keyword\">id</span> object, <span class=\"built_in\">UIViewController</span> *controller, <span class=\"built_in\">NSIndexPath</span>* indexPath) {</div><div class=\"line\">        </div><div class=\"line\">    \t...</div><div class=\"line\">    \t...</div><div class=\"line\">    \t...</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">    };</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)configureForm</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.action</span> = [[NITableViewActions alloc] initWithTarget:<span class=\"keyword\">self</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSArray</span>* tableContents =</div><div class=\"line\">    [<span class=\"built_in\">NSArray</span> arrayWithObjects:</div><div class=\"line\">     <span class=\"string\">@\"请输入驾驶证号\"</span>,</div><div class=\"line\">     [NITextFieldFormElement textFieldElementWithID:<span class=\"number\">0</span> labelText:<span class=\"string\">@\"驾驶证号\"</span> placeholderText:<span class=\"string\">@\"请输入驾驶证号\"</span> value:TESTID delegate:<span class=\"keyword\">self</span>],</div><div class=\"line\">     [<span class=\"keyword\">self</span><span class=\"variable\">.action</span> attachToObject:[NITapCellObject objectWithTitle:<span class=\"string\">@\"查询\"</span> color:COLOR_TAP]</div><div class=\"line\">                 navigationBlock:<span class=\"keyword\">self</span><span class=\"variable\">.queryBlock</span>],</div><div class=\"line\">     <span class=\"literal\">nil</span>];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.model</span> = [[NITableViewModel alloc] initWithSectionedArray:tableContents</div><div class=\"line\">                                                         delegate:(<span class=\"keyword\">id</span>)[NICellFactory class]];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.tableView</span><span class=\"variable\">.dataSource</span> = <span class=\"keyword\">self</span><span class=\"variable\">.model</span>;</div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.tableView</span><span class=\"variable\">.delegate</span> = [<span class=\"keyword\">self</span><span class=\"variable\">.action</span> forwardingTo:<span class=\"keyword\">self</span>];</div><div class=\"line\">    </div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n\n<p>这段代码的效果如图</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/433937/Blog/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian3.png\" alt=\"表单效果\"></p>\n<p>其关键的地方就是</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) NITableViewModel* model;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) NITableViewActions *action;</div></pre></td></tr></table></figure>\n\n<p><code>NITableViewModel</code> 接管了<code>UITableView</code>的<code>dataSource</code>,并用一种更简单直观的方式创建表格内容,只需要创建对应的tableContents即可生成表单</p>\n<p><code>NITableViewActions</code> 接管了<code>UITableView</code>的<code>delegate</code>,提供了<code>NITableViewModel</code>中已连接对象(attachToObject)对点击事件以<em>block</em>的方式进行响应</p>\n<p><code>NITableViewModel</code>与<code>NITableViewActions</code>的恰当配合则能够生成所需的表单</p>\n<h1 id=\"自定义表单\">自定义表单</h1>\n<p>在日常的开发中,仅仅依靠NimbusKit自带的表单组件肯定是无法完全满足我们的需求的,所以自定义表单组件则是非常必要的功能,而在NimbusKit中自定义表单组件也是非常容易的,比如自带的表单组件中只有独立的Label或者Input组件,并没有像上图那样左边为Label右边为Input的组件,而上图中所见的输入身份证的组件,即为我自定义的表单组件之一,其代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NITextFieldFormElement</span> : <span class=\"title\">NIFormElement</span></span></div><div class=\"line\"></div><div class=\"line\">+ (<span class=\"keyword\">id</span>)textFieldElementWithID:(<span class=\"built_in\">NSInteger</span>)elementID labelText:(<span class=\"built_in\">NSString</span>*)labelText placeholderText:(<span class=\"built_in\">NSString</span> *)placeholderText value:(<span class=\"built_in\">NSString</span> *)value delegate:(<span class=\"keyword\">id</span>&lt;UITextFieldDelegate&gt;)delegate;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span>* labelText;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span>* placeholderText;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>) <span class=\"built_in\">NSString</span>* value;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">id</span>&lt;UITextFieldDelegate&gt; delegate;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NITextFieldFormElementCell</span> : <span class=\"title\">NIFormElementCell</span> &lt;<span class=\"title\">UITextFieldDelegate</span>&gt;</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>, NI_STRONG) GGTextField* textField;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NITextFieldFormElement</span></span></div><div class=\"line\"></div><div class=\"line\">+ (<span class=\"keyword\">id</span>)textFieldElementWithID:(<span class=\"built_in\">NSInteger</span>)elementID labelText:(<span class=\"built_in\">NSString</span> *)labelText placeholderText:(<span class=\"built_in\">NSString</span> *)placeholderText value:(<span class=\"built_in\">NSString</span> *)value delegate:(<span class=\"keyword\">id</span>&lt;UITextFieldDelegate&gt;)delegate</div><div class=\"line\">{</div><div class=\"line\">    </div><div class=\"line\">    NITextFieldFormElement* element = [<span class=\"keyword\">super</span> elementWithID:elementID];</div><div class=\"line\">    element<span class=\"variable\">.labelText</span> = labelText;</div><div class=\"line\">    element<span class=\"variable\">.placeholderText</span> = placeholderText;</div><div class=\"line\">    element<span class=\"variable\">.value</span> = value;</div><div class=\"line\">    element<span class=\"variable\">.delegate</span> = delegate;</div><div class=\"line\">    <span class=\"keyword\">return</span> element;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (Class)cellClass {</div><div class=\"line\">    <span class=\"keyword\">return</span> [NITextFieldFormElementCell class];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NITextFieldFormElementCell</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@synthesize</span> textField = _textField;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////////////////////////////////////////////////////////////////</span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(<span class=\"built_in\">NSString</span> *)reuseIdentifier {</div><div class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> initWithStyle:style reuseIdentifier:reuseIdentifier])) {</div><div class=\"line\">        <span class=\"keyword\">self</span><span class=\"variable\">.selectionStyle</span> = UITableViewCellSelectionStyleNone;</div><div class=\"line\">        </div><div class=\"line\">        _textField = [[GGTextField alloc] init];</div><div class=\"line\">        [_textField setTag:<span class=\"keyword\">self</span><span class=\"variable\">.element</span><span class=\"variable\">.elementID</span>];</div><div class=\"line\">        [_textField setAdjustsFontSizeToFitWidth:<span class=\"literal\">YES</span>];</div><div class=\"line\">        [_textField setMinimumFontSize:<span class=\"number\">10.0</span>f];</div><div class=\"line\">        [_textField setTextAlignment:NSTextAlignmentRight];</div><div class=\"line\">        [_textField addTarget:<span class=\"keyword\">self</span> action:<span class=\"keyword\">@selector</span>(textFieldDidChangeValue) forControlEvents:UIControlEventAllEditingEvents];</div><div class=\"line\">        [<span class=\"keyword\">self</span><span class=\"variable\">.contentView</span> addSubview:_textField];</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////////////////////////////////////////////////////////////////</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)layoutSubviews {</div><div class=\"line\">    [<span class=\"keyword\">super</span> layoutSubviews];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> labelWidth = <span class=\"number\">80</span>;</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> frame = UIEdgeInsetsInsetRect(<span class=\"keyword\">self</span><span class=\"variable\">.contentView</span><span class=\"variable\">.bounds</span>, UIEdgeInsetsMake(<span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>));</div><div class=\"line\">    frame = CGRectMake(frame<span class=\"variable\">.origin</span><span class=\"variable\">.x</span>+labelWidth, frame<span class=\"variable\">.origin</span><span class=\"variable\">.y</span>, frame<span class=\"variable\">.size</span><span class=\"variable\">.width</span>-labelWidth, frame<span class=\"variable\">.size</span><span class=\"variable\">.height</span>);</div><div class=\"line\">    _textField<span class=\"variable\">.frame</span> = frame;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////////////////////////////////////////////////////////////////</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)prepareForReuse {</div><div class=\"line\">    [<span class=\"keyword\">super</span> prepareForReuse];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.textLabel</span><span class=\"variable\">.text</span> = <span class=\"literal\">nil</span>;</div><div class=\"line\">    </div><div class=\"line\">    _textField<span class=\"variable\">.placeholder</span> = <span class=\"literal\">nil</span>;</div><div class=\"line\">    _textField<span class=\"variable\">.text</span> = <span class=\"literal\">nil</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////////////////////////////////////////////////////////////////</span></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)shouldUpdateCellWithObject:(NITextFieldFormElement *)textfieldElement {</div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"keyword\">super</span> shouldUpdateCellWithObject:textfieldElement]) {</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">self</span><span class=\"variable\">.textLabel</span><span class=\"variable\">.text</span> = textfieldElement<span class=\"variable\">.labelText</span>;</div><div class=\"line\">        </div><div class=\"line\">        _textField<span class=\"variable\">.placeholder</span> = textfieldElement<span class=\"variable\">.placeholderText</span>;</div><div class=\"line\">        _textField<span class=\"variable\">.text</span> = textfieldElement<span class=\"variable\">.value</span>;</div><div class=\"line\">        _textField<span class=\"variable\">.delegate</span> = textfieldElement<span class=\"variable\">.delegate</span>;</div><div class=\"line\">        </div><div class=\"line\">        _textField<span class=\"variable\">.tag</span> = <span class=\"keyword\">self</span><span class=\"variable\">.tag</span>;</div><div class=\"line\">        </div><div class=\"line\">        [<span class=\"keyword\">self</span> setNeedsLayout];</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////////////////////////////////////////////////////////////////</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)textFieldDidChangeValue {</div><div class=\"line\">    NITextFieldFormElement* textInputElement = (NITextFieldFormElement *)<span class=\"keyword\">self</span><span class=\"variable\">.element</span>;</div><div class=\"line\">    textInputElement<span class=\"variable\">.value</span> = _textField<span class=\"variable\">.text</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n\n<p>上述代码给出了如何自定义NimbusKit中的表单组件,可见表单组件几乎都是<code>NIFormElement</code>的子类,只要基于此类,定义显示所需的控件到<code>NIFormElement</code>内部,并调整对应位置即可</p>\n<p>至此我们已经知道如何自定义组件了,但是如果有稍微复杂的需求的话,要如何实现呢? </p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/433937/Blog/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian5.png\" alt=\"复杂的自定义组件\"></p>\n<p>如图,输入<strong><em>出发城市</em></strong>和<strong><em>目的城市</em></strong>的组件也是一个自定义组件,除了有很多Label和Input之外,其高度也跟普通的组件不一样.</p>\n<p>其实自定义高度很简单,只要重载<code>NICell</code>(比如<code>NITextFieldFormElementCell</code>)的此方法并返回所需的高度</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"built_in\">CGFloat</span>)heightForObject:(<span class=\"keyword\">id</span>)object atIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath tableView:(<span class=\"built_in\">UITableView</span> *)tableView;</div></pre></td></tr></table></figure>\n\n<p>然后在使用的ViewController中调用UITableView的方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">CGFloat</span>)tableView:(<span class=\"built_in\">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class=\"built_in\">NSIndexPath</span> *)indexPath {</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> height = tableView<span class=\"variable\">.rowHeight</span>;</div><div class=\"line\">    <span class=\"keyword\">id</span> object = [(NITableViewModel *)tableView<span class=\"variable\">.dataSource</span> objectAtIndexPath:indexPath];</div><div class=\"line\">    <span class=\"keyword\">id</span> class = [object cellClass];</div><div class=\"line\">    <span class=\"keyword\">if</span> ([class respondsToSelector:<span class=\"keyword\">@selector</span>(heightForObject:atIndexPath:tableView:)]) {</div><div class=\"line\">        height = [class heightForObject:object atIndexPath:indexPath tableView:tableView];</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> height;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>即可自定义此组件的高度了(其实直接在上述方法中直接返回对应的高度即可,但是上述代码则有很高的通用性)</p>\n<h1 id=\"小结\">小结</h1>\n<p>至此,我们已经了解了<code>NimbusKit</code>的基本功能和如何对其表单模型进行自定义.</p>\n<p>除了此次着重介绍的Table-Action模型之外,其实<code>NimbusKit</code>还有很多值得使用的功能,如<strong>Launcher</strong>功能,<strong>Overview</strong>功能,实用且集成起来很简单,在这就不一一介绍了.</p>\n<p>最后,简单介绍一下NimbusKit的作者<a href=\"http://jeffverkoeyen.com/\" target=\"_blank\" rel=\"external\">Jeff Verkoeyen</a>,其主要作品有:</p>\n<ul>\n<li>Facebook for iPad ( June 2010 - June 2011 )</li>\n<li>Google Maps for iPhone ( June 2012 - April 2013 )</li>\n</ul>\n","source":"_posts/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian.md","raw":"---\nlayout: post\ntitle: \"NimbusKit 介绍与使用实践\"\ndate: 2013-12-06 16:51:28 +0800\ncomments: true\ncategories: 技巧心得\n---\n\n介绍\n========\n\n[NimbusKit 官网](http://nimbuskit.info/)  \n[NimbusKit 源码](https://github.com/jverkoey/nimbus)\n\nNimbusKit是一组用于快速开发的iOS框架,是源自*Facebook*的著名框架`Three20`的替代者,包括下面几大类的功能\n\n* Attributed Label    -   富文字Label\n* Badge - 数字角标\n* Interapp - 应用间交互\n* Launcher - 类桌面启动器\n* Network Image - 网络图片下载显示\n* Photo Albums - 相册\n* Web Controller - 浏览器\n* Table Models - 表格数据模型\n* Overview - 直观方便的调试分析内嵌图形工具\n* 等...\n\nNimbusKit的demo很直观,编译运行以后就可以体验其强大的功能了\n\n![Nimbus Demo](https://dl.dropboxusercontent.com/u/433937/Blog/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian2.png)\n\n\n使用\n========\n\n因为之前的项目的富文本设计要支持`iOS5`和`iOS6`,而`attributeString`特性只有iOS6支持,所以使用了*NIAttributedLabel*\n\n![富文本](https://dl.dropboxusercontent.com/u/433937/Blog/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian1.PNG)\n\n\n这次新的项目由于有大量的表单页面,考虑到完全自己实现太耗时间,所以又重新考虑了`NimbusKit`的`Table Models`\n\nNimbusKit提供的表单组件如下\n\n|| 组件 \t\t\t\t\t\t\t\t|| 功能 \t\t\t||\n||:--------------------------------:||:------------:||\n|| NIRadioGroup \t\t\t\t\t|| 多选一 \t\t||\n|| NITextInputFormElement \t\t\t|| 文本输入 \t\t||\n|| NISwitchFormElement \t\t\t\t|| 开关 \t\t\t||\n|| NISliderFormElement \t\t\t\t|| 滑动条 \t\t||\n|| NISegmentedControlFormElement \t|| 分段 \t\t\t||\n|| NIDatePickerFormElement \t\t\t|| 时间选择\t\t|| \n|| NITitleCellObject \t\t\t\t|| 单行文本 \t\t|| \n|| NISubtitleCellObject \t\t\t|| 主副文本 \t\t||\n|| ... \t\t\t\t\t\t\t\t|| 等其他 \t\t||\n\n![基础表单组件](https://dl.dropboxusercontent.com/u/433937/Blog/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian4.png)\n\n这里首先要介绍一下NimbusKit的Table-Modal-Action模型,先上一段简单代码\n\n``` objc\n\n@interface GGJSZController ()\n<\nUITableViewDelegate,\nUITextFieldDelegate\n>\n\n@property (nonatomic, strong) UITableView *tableView;\n\n@property (nonatomic, strong) NITableViewModel* model;\n@property (nonatomic, strong) NITableViewActions *action;\n\n@property (nonatomic, strong) NIActionBlock queryBlock;\n\n@end\n\n\n\n@implementation GGJSZController\n\n- (id)init\n{\n    self = [super init];\n    if (self) {\n        \n        self.tableView = [[UITableView alloc] initWithFrame:self.view.bounds style:UITableViewStyleGrouped];\n        ...\n        ...\n        self.tableView.delegate = self;\n        [self.view addSubview:self.tableView];\n        \n        [self configureBlock];\n        [self configureForm];\n        \n    }\n    return self;\n}\n\n- (void)configureBlock\n{\n    __weak GGUserController *weakSelf = self;\n    \n    self.queryBlock = ^BOOL(id object, UIViewController *controller, NSIndexPath* indexPath) {\n        \n    \t...\n    \t...\n    \t...\n\n        return YES;\n    };\n    \n    \n}\n\n- (void)configureForm\n{\n    self.action = [[NITableViewActions alloc] initWithTarget:self];\n    \n    NSArray* tableContents =\n    [NSArray arrayWithObjects:\n     @\"请输入驾驶证号\",\n     [NITextFieldFormElement textFieldElementWithID:0 labelText:@\"驾驶证号\" placeholderText:@\"请输入驾驶证号\" value:TESTID delegate:self],\n     [self.action attachToObject:[NITapCellObject objectWithTitle:@\"查询\" color:COLOR_TAP]\n                 navigationBlock:self.queryBlock],\n     nil];\n    \n    self.model = [[NITableViewModel alloc] initWithSectionedArray:tableContents\n                                                         delegate:(id)[NICellFactory class]];\n    \n    self.tableView.dataSource = self.model;\n    self.tableView.delegate = [self.action forwardingTo:self];\n    \n}\n\n@end\n\n\n```\n\n这段代码的效果如图\n\n![表单效果](https://dl.dropboxusercontent.com/u/433937/Blog/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian3.png)\n\n其关键的地方就是\n\n``` objc\n\n@property (nonatomic, strong) NITableViewModel* model;\n@property (nonatomic, strong) NITableViewActions *action;\n\n```\n\n`NITableViewModel` 接管了`UITableView`的`dataSource`,并用一种更简单直观的方式创建表格内容,只需要创建对应的tableContents即可生成表单\n\n`NITableViewActions` 接管了`UITableView`的`delegate`,提供了`NITableViewModel`中已连接对象(attachToObject)对点击事件以*block*的方式进行响应\n\n`NITableViewModel`与`NITableViewActions`的恰当配合则能够生成所需的表单\n\n自定义表单\n========\n\n在日常的开发中,仅仅依靠NimbusKit自带的表单组件肯定是无法完全满足我们的需求的,所以自定义表单组件则是非常必要的功能,而在NimbusKit中自定义表单组件也是非常容易的,比如自带的表单组件中只有独立的Label或者Input组件,并没有像上图那样左边为Label右边为Input的组件,而上图中所见的输入身份证的组件,即为我自定义的表单组件之一,其代码如下\n\n``` objc\n\n@interface NITextFieldFormElement : NIFormElement\n\n+ (id)textFieldElementWithID:(NSInteger)elementID labelText:(NSString*)labelText placeholderText:(NSString *)placeholderText value:(NSString *)value delegate:(id<UITextFieldDelegate>)delegate;\n\n\n@property (nonatomic, copy) NSString* labelText;\n@property (nonatomic, copy) NSString* placeholderText;\n@property (nonatomic, copy) NSString* value;\n@property (nonatomic, assign) id<UITextFieldDelegate> delegate;\n\n@end\n\n\n@interface NITextFieldFormElementCell : NIFormElementCell <UITextFieldDelegate>\n@property (nonatomic, readonly, NI_STRONG) GGTextField* textField;\n@end\n\n\n\n\n\n@implementation NITextFieldFormElement\n\n+ (id)textFieldElementWithID:(NSInteger)elementID labelText:(NSString *)labelText placeholderText:(NSString *)placeholderText value:(NSString *)value delegate:(id<UITextFieldDelegate>)delegate\n{\n    \n    NITextFieldFormElement* element = [super elementWithID:elementID];\n    element.labelText = labelText;\n    element.placeholderText = placeholderText;\n    element.value = value;\n    element.delegate = delegate;\n    return element;\n}\n\n- (Class)cellClass {\n    return [NITextFieldFormElementCell class];\n}\n\n@end\n\n\n\n@implementation NITextFieldFormElementCell\n\n@synthesize textField = _textField;\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {\n    if ((self = [super initWithStyle:style reuseIdentifier:reuseIdentifier])) {\n        self.selectionStyle = UITableViewCellSelectionStyleNone;\n        \n        _textField = [[GGTextField alloc] init];\n        [_textField setTag:self.element.elementID];\n        [_textField setAdjustsFontSizeToFitWidth:YES];\n        [_textField setMinimumFontSize:10.0f];\n        [_textField setTextAlignment:NSTextAlignmentRight];\n        [_textField addTarget:self action:@selector(textFieldDidChangeValue) forControlEvents:UIControlEventAllEditingEvents];\n        [self.contentView addSubview:_textField];\n    }\n    return self;\n}\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n- (void)layoutSubviews {\n    [super layoutSubviews];\n    \n    CGFloat labelWidth = 80;\n    CGRect frame = UIEdgeInsetsInsetRect(self.contentView.bounds, UIEdgeInsetsMake(5, 10, 5, 10));\n    frame = CGRectMake(frame.origin.x+labelWidth, frame.origin.y, frame.size.width-labelWidth, frame.size.height);\n    _textField.frame = frame;\n}\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n- (void)prepareForReuse {\n    [super prepareForReuse];\n    \n    self.textLabel.text = nil;\n    \n    _textField.placeholder = nil;\n    _textField.text = nil;\n}\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n- (BOOL)shouldUpdateCellWithObject:(NITextFieldFormElement *)textfieldElement {\n    if ([super shouldUpdateCellWithObject:textfieldElement]) {\n        \n        self.textLabel.text = textfieldElement.labelText;\n        \n        _textField.placeholder = textfieldElement.placeholderText;\n        _textField.text = textfieldElement.value;\n        _textField.delegate = textfieldElement.delegate;\n        \n        _textField.tag = self.tag;\n        \n        [self setNeedsLayout];\n        return YES;\n    }\n    return NO;\n}\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n- (void)textFieldDidChangeValue {\n    NITextFieldFormElement* textInputElement = (NITextFieldFormElement *)self.element;\n    textInputElement.value = _textField.text;\n}\n\n@end\n\n```\n\n上述代码给出了如何自定义NimbusKit中的表单组件,可见表单组件几乎都是`NIFormElement`的子类,只要基于此类,定义显示所需的控件到`NIFormElement`内部,并调整对应位置即可\n\n至此我们已经知道如何自定义组件了,但是如果有稍微复杂的需求的话,要如何实现呢? \n\n![复杂的自定义组件](https://dl.dropboxusercontent.com/u/433937/Blog/2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian5.png)\n\n如图,输入***出发城市***和***目的城市***的组件也是一个自定义组件,除了有很多Label和Input之外,其高度也跟普通的组件不一样.\n\n其实自定义高度很简单,只要重载`NICell`(比如`NITextFieldFormElementCell`)的此方法并返回所需的高度\n\n``` objc\n+ (CGFloat)heightForObject:(id)object atIndexPath:(NSIndexPath *)indexPath tableView:(UITableView *)tableView;\n```\n\n然后在使用的ViewController中调用UITableView的方法\n\n``` objc\n- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {\n    CGFloat height = tableView.rowHeight;\n    id object = [(NITableViewModel *)tableView.dataSource objectAtIndexPath:indexPath];\n    id class = [object cellClass];\n    if ([class respondsToSelector:@selector(heightForObject:atIndexPath:tableView:)]) {\n        height = [class heightForObject:object atIndexPath:indexPath tableView:tableView];\n    }\n    return height;\n}\n```\n\n即可自定义此组件的高度了(其实直接在上述方法中直接返回对应的高度即可,但是上述代码则有很高的通用性)\n\n\n小结\n========\n\n至此,我们已经了解了`NimbusKit`的基本功能和如何对其表单模型进行自定义.\n\n除了此次着重介绍的Table-Action模型之外,其实`NimbusKit`还有很多值得使用的功能,如**Launcher**功能,**Overview**功能,实用且集成起来很简单,在这就不一一介绍了.\n\n最后,简单介绍一下NimbusKit的作者[Jeff Verkoeyen](http://jeffverkoeyen.com/),其主要作品有:\n\n* Facebook for iPad ( June 2010 - June 2011 )\n* Google Maps for iPhone ( June 2012 - April 2013 )\n\n\n\n\n","slug":"2013-12-06-at-nimbus-jie-shao-yu-shi-yong-shi-jian","updated":1386554212000,"excerpt":"","_id":"b7ymd3ssgwpfus9q","tags":[],"photos":[],"link":""},{"layout":"post","title":"个人总结的一些 APP 的代码实践","date":1386658606000,"comments":true,"categories":["uik4bvz6gsyceazg"],"content":"<h2 id=\"建立一个辅助的APP类,减少对AppDelegate的修改\">建立一个辅助的APP类,减少对AppDelegate的修改</h2>\n<p>最开始接触iOS开发的时候,如果需要一些全局变量或者全局函数的时候,总是直接在<code>AppDelegate</code>中添加,因为<code>AppDelegate</code>可以直接获取</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"built_in\">UIApplication</span> sharedApplication]<span class=\"variable\">.delegate</span></div></pre></td></tr></table></figure>\n\n<p>但是时间长了还是觉得这样不太好,<code>AppDelegate</code>本身有其自己的作用(对于App本身的一些事件进行处理,如启动,切换,推送),这样做感觉怪怪的,所以还是自己弄一个专门处理我们所需的全局变亮或者全局函数的对象会更好一些</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//APPHelper.h</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">APPHelper</span></span></div><div class=\"line\"></div><div class=\"line\">+ (APPHelper*)call;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>) configureWindow:(<span class=\"built_in\">UIWindow</span>*)window;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">readonly</span>) AppDelegate *delegate;</div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">strong</span>, <span class=\"keyword\">readonly</span>) <span class=\"built_in\">UIWindow</span> *window;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//APPHelper.m</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">APPHelper</span> ()</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">APPHelper</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)init</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) {</div><div class=\"line\">        </div><div class=\"line\">        _delegate = (GGAppDelegate*)[<span class=\"built_in\">UIApplication</span> sharedApplication]<span class=\"variable\">.delegate</span>;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">+ (APPHelper *)call</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span>  onceQueue;</div><div class=\"line\">    <span class=\"keyword\">static</span> APPHelper *appInstance;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">dispatch_once</span>(&onceQueue, ^{</div><div class=\"line\">        appInstance = [[APPHelper alloc] init];</div><div class=\"line\">    });</div><div class=\"line\">    <span class=\"keyword\">return</span> appInstance;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">UIWindow</span> *)window</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span><span class=\"variable\">.delegate</span><span class=\"variable\">.window</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)configureWindow:(<span class=\"built_in\">UIWindow</span>*)window</div><div class=\"line\">{</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UINavigationController</span> *nav = [[<span class=\"built_in\">UINavigationController</span> alloc] init];</div><div class=\"line\"></div><div class=\"line\">    ...</div><div class=\"line\">    ...</div><div class=\"line\">    ...</div><div class=\"line\">    </div><div class=\"line\">    window<span class=\"variable\">.rootViewController</span> = nav;</div><div class=\"line\">    </div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n\n<p>然后 在预编译头<code>*.pch</code>中加入</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#import <span class=\"title\">\"AppHelper.h\"</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#define APP ([APPHelper call])</span></div></pre></td></tr></table></figure>\n\n<p>就可以直接在代码的任意一个地方直接使用此类了,如</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//设置APP为圆角</span></div><div class=\"line\">APP<span class=\"variable\">.window</span><span class=\"variable\">.layer</span><span class=\"variable\">.cornerRadius</span> = <span class=\"number\">5.0</span>f;</div><div class=\"line\">APP<span class=\"variable\">.window</span><span class=\"variable\">.layer</span><span class=\"variable\">.masksToBounds</span> = <span class=\"literal\">YES</span>;</div></pre></td></tr></table></figure>\n\n<h2 id=\"简单的Autoresizing的宏\">简单的Autoresizing的宏</h2>\n<p>一开始我就喜欢代码布局,从来没使用过IB或者SB开发,所以如何在代码中用<strong>Autoresizing</strong>就显得很重要了(那个时候还没有<em>AutoLayout</em>).</p>\n<p>为此我还专门研究了一下IB(那个时候还没有SB),并把生成的nib用<a href=\"https://github.com/akosma/nib2objc/\" target=\"_blank\" rel=\"external\">nib2objc</a>转换成了代码来学习.</p>\n<p>使用下面的宏,可以很轻松的实现<strong>Autoresizing</strong>.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"preprocessor\">#define FlexibleT                   UIViewAutoresizingFlexibleTopMargin</span></div><div class=\"line\"><span class=\"preprocessor\">#define FlexibleB                   UIViewAutoresizingFlexibleBottomMargin</span></div><div class=\"line\"><span class=\"preprocessor\">#define FlexibleL                   UIViewAutoresizingFlexibleLeftMargin</span></div><div class=\"line\"><span class=\"preprocessor\">#define FlexibleR                   UIViewAutoresizingFlexibleRightMargin</span></div><div class=\"line\"><span class=\"preprocessor\">#define FlexibleH                   UIViewAutoresizingFlexibleHeight</span></div><div class=\"line\"><span class=\"preprocessor\">#define FlexibleW                   UIViewAutoresizingFlexibleWidth</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#define FixedMarginT                FlexibleW | FlexibleB</span></div><div class=\"line\"><span class=\"preprocessor\">#define FixedMarginB                FlexibleW | FlexibleT</span></div><div class=\"line\"><span class=\"preprocessor\">#define FixedMarginL                FlexibleH | FlexibleR</span></div><div class=\"line\"><span class=\"preprocessor\">#define FixedMarginR                FlexibleH | FlexibleL</span></div><div class=\"line\"><span class=\"preprocessor\">#define FixedHorizental             FlexibleW | FlexibleT | FlexibleB</span></div><div class=\"line\"><span class=\"preprocessor\">#define FixedVertical               FlexibleH | FlexibleL | FlexibleR</span></div><div class=\"line\"><span class=\"preprocessor\">#define FixedALL                    FlexibleW | FlexibleH</span></div><div class=\"line\"><span class=\"preprocessor\">#define FixedCenter                 FlexibleL | FlexibleR | FlexibleT | FlexibleB</span></div></pre></td></tr></table></figure>\n\n<p>使用上述的宏时,最好对<code>UIView</code>扩展一下,添加下列方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>) autoResize:(UIViewAutoresizing) type</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.autoresizingMask</span> = mask;</div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.autoresizesSubviews</span> = <span class=\"literal\">YES</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>使用方法如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">XXXViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)init</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init];</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span>) {</div><div class=\"line\">        <span class=\"comment\">// Custom initialization</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">self</span><span class=\"variable\">.tableView</span> = [[<span class=\"built_in\">UITableView</span> alloc] initWithFrame:<span class=\"keyword\">self</span><span class=\"variable\">.view</span><span class=\"variable\">.bounds</span> style:UITableViewStyleGrouped];</div><div class=\"line\">        **[<span class=\"keyword\">self</span><span class=\"variable\">.tableView</span> autoResize:FixedALL];**    </div><div class=\"line\">        <span class=\"keyword\">self</span><span class=\"variable\">.tableView</span><span class=\"variable\">.delegate</span> = <span class=\"keyword\">self</span>;</div><div class=\"line\">        [<span class=\"keyword\">self</span><span class=\"variable\">.view</span> addSubview:<span class=\"keyword\">self</span><span class=\"variable\">.tableView</span>];</div><div class=\"line\">        </div><div class=\"line\">        ...</div><div class=\"line\">        ...</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>关于各个宏的作用如下</p>\n<p>||              宏             ||          含义        ||<br>||:—————————————:||:——————————:||<br>|| FixedMarginB               ||      下侧距离固定      ||<br>|| FixedMarginL               ||      左侧距离固定      ||<br>|| FixedMarginR               ||      右侧距离固定      ||<br>|| FixedHorizental            ||      左右距离固定      ||<br>|| FixedVertical              ||      上下距离固定      ||<br>|| FixedALL                   ||      四周距离固定      ||<br>|| FixedCenter                ||      居中             ||</p>\n<p>从这张图上我们可以看到对于各个值的含义,出自<a href=\"http://stackoverflow.com/questions/7754851/autoresizing-masks-programmatically-vs-interfact-builder-xib-nib\" target=\"_blank\" rel=\"external\">stackoverflow</a></p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/433937/Blog/2013-12-10-ge-ren-zong-jie-de-%5B%3F%5D-xie-app-de-dai-ma-shi-jian1.png\" alt=\"值定义\"></p>\n<p>至今为止这套宏在我的开发过程中还使用得很好,所以我也没有去研究新的<code>AutoLayout</code>(好像也比较的复杂,),不过在<code>Github</code>上有个对<code>AutoLayout</code>封装得很好的库<a href=\"https://github.com/cloudkite/Masonry\" target=\"_blank\" rel=\"external\">Masonry</a>,有空的时候可以研究一下</p>\n<h2 id=\"一些常用的Category\">一些常用的Category</h2>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////</span></div><div class=\"line\"><span class=\"comment\">//  UIColor</span></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//通过RGBA值(比如红色FF0000FF)生成UIColor</span></div><div class=\"line\">+ (<span class=\"built_in\">UIColor</span>* ) colorWithHex:(<span class=\"keyword\">int</span>)color {</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">float</span> red = (color & <span class=\"number\">0xff000000</span>) &gt;&gt; <span class=\"number\">24</span>;</div><div class=\"line\">    <span class=\"keyword\">float</span> green = (color & <span class=\"number\">0x00ff0000</span>) &gt;&gt; <span class=\"number\">16</span>;</div><div class=\"line\">    <span class=\"keyword\">float</span> blue = (color & <span class=\"number\">0x0000ff00</span>) &gt;&gt; <span class=\"number\">8</span>;</div><div class=\"line\">    <span class=\"keyword\">float</span> alpha = (color & <span class=\"number\">0x000000ff</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"built_in\">UIColor</span> colorWithRed:red/<span class=\"number\">255.0</span> green:green/<span class=\"number\">255.0</span> blue:blue/<span class=\"number\">255.0</span> alpha:alpha/<span class=\"number\">255.0</span>];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////</span></div><div class=\"line\"><span class=\"comment\">//  UIImage</span></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//复制当前图片</span></div><div class=\"line\">- (<span class=\"built_in\">UIImage</span> *)duplicate</div><div class=\"line\">{</div><div class=\"line\">    CGImageRef newCgIm = CGImageCreateCopy(<span class=\"keyword\">self</span><span class=\"variable\">.CGImage</span>);</div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *newImage = [<span class=\"built_in\">UIImage</span> imageWithCGImage:newCgIm scale:<span class=\"keyword\">self</span><span class=\"variable\">.scale</span> orientation:<span class=\"keyword\">self</span><span class=\"variable\">.imageOrientation</span>];</div><div class=\"line\">    CGImageRelease(newCgIm);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> newImage;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使当前图片可拉伸</span></div><div class=\"line\">- (<span class=\"built_in\">UIImage</span> *)stretched</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"built_in\">CGSize</span> size = <span class=\"keyword\">self</span><span class=\"variable\">.size</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIEdgeInsets</span> insets = UIEdgeInsetsMake(truncf(size<span class=\"variable\">.height</span>-<span class=\"number\">1</span>)/<span class=\"number\">2</span>, truncf(size<span class=\"variable\">.width</span>-<span class=\"number\">1</span>)/<span class=\"number\">2</span>, truncf(size<span class=\"variable\">.height</span>-<span class=\"number\">1</span>)/<span class=\"number\">2</span>, truncf(size<span class=\"variable\">.width</span>-<span class=\"number\">1</span>)/<span class=\"number\">2</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> resizableImageWithCapInsets:insets];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使当前图片抗锯齿(当图片在旋转时有用, 原理就是在图片周围加1px的透明像素)</span></div><div class=\"line\">- (<span class=\"built_in\">UIImage</span> *)antiAlias</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">int</span> border = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> rect = CGRectMake(border, border, <span class=\"keyword\">self</span><span class=\"variable\">.size</span><span class=\"variable\">.width</span>-<span class=\"number\">2</span>*border, <span class=\"keyword\">self</span><span class=\"variable\">.size</span><span class=\"variable\">.height</span>-<span class=\"number\">2</span>*border);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *img = <span class=\"literal\">nil</span>;</div><div class=\"line\">    </div><div class=\"line\">    UIGraphicsBeginImageContext(CGSizeMake(rect<span class=\"variable\">.size</span><span class=\"variable\">.width</span>,rect<span class=\"variable\">.size</span><span class=\"variable\">.height</span>));</div><div class=\"line\">    [<span class=\"keyword\">self</span> drawInRect:CGRectMake(-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, <span class=\"keyword\">self</span><span class=\"variable\">.size</span><span class=\"variable\">.width</span>, <span class=\"keyword\">self</span><span class=\"variable\">.size</span><span class=\"variable\">.height</span>)];</div><div class=\"line\">    img = UIGraphicsGetImageFromCurrentImageContext();</div><div class=\"line\">    UIGraphicsEndImageContext();</div><div class=\"line\">    </div><div class=\"line\">    UIGraphicsBeginImageContext(<span class=\"keyword\">self</span><span class=\"variable\">.size</span>);</div><div class=\"line\">    [img drawInRect:rect];</div><div class=\"line\">    <span class=\"built_in\">UIImage</span>* antiImage = UIGraphicsGetImageFromCurrentImageContext();</div><div class=\"line\">    UIGraphicsEndImageContext();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> antiImage;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//创建纯色的图片</span></div><div class=\"line\">+ (<span class=\"built_in\">UIImage</span> *)imageWithColor:(<span class=\"built_in\">UIColor</span> *)color Size:(<span class=\"built_in\">CGSize</span>)size</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"built_in\">CGRect</span> rect = CGRectMake(<span class=\"number\">0.0</span>f, <span class=\"number\">0.0</span>f, size<span class=\"variable\">.width</span>, size<span class=\"variable\">.height</span>);</div><div class=\"line\">    UIGraphicsBeginImageContext(rect<span class=\"variable\">.size</span>);</div><div class=\"line\">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class=\"line\">    </div><div class=\"line\">    CGContextSetFillColorWithColor(context, [color CGColor]);</div><div class=\"line\">    CGContextFillRect(context, rect);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIImage</span> *image = UIGraphicsGetImageFromCurrentImageContext();</div><div class=\"line\">    UIGraphicsEndImageContext();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> [image stretched];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//imageNamed的非缓存版</span></div><div class=\"line\">+ (<span class=\"built_in\">UIImage</span> *)imageName:(<span class=\"built_in\">NSString</span> *)name</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"built_in\">NSString</span> *path = [[[<span class=\"built_in\">NSBundle</span> mainBundle] bundlePath] stringByAppendingString:[<span class=\"built_in\">NSString</span> stringWithFormat:<span class=\"string\">@\"/%@\"</span>,name]];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"built_in\">UIImage</span> imageWithContentsOfFile:path];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////</span></div><div class=\"line\"><span class=\"comment\">//  UIButton</span></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">float</span>)x</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span><span class=\"variable\">.frame</span><span class=\"variable\">.origin</span><span class=\"variable\">.x</span>;</div><div class=\"line\">}</div><div class=\"line\">- (<span class=\"keyword\">float</span>)y</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span><span class=\"variable\">.frame</span><span class=\"variable\">.origin</span><span class=\"variable\">.y</span>;</div><div class=\"line\">}</div><div class=\"line\">- (<span class=\"keyword\">float</span>)w</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span><span class=\"variable\">.frame</span><span class=\"variable\">.size</span><span class=\"variable\">.width</span>;</div><div class=\"line\">}</div><div class=\"line\">- (<span class=\"keyword\">float</span>)h</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span><span class=\"variable\">.frame</span><span class=\"variable\">.size</span><span class=\"variable\">.height</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setTagName:(<span class=\"built_in\">NSString</span>*)name</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.tag</span> = [name hash];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">UIView</span> *)viewWithName:(<span class=\"built_in\">NSString</span> *)name</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> viewWithTag:[name hash]];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>) autoResize:(UIViewAutoresizing)mask</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.autoresizingMask</span> = mask;</div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.autoresizesSubviews</span> = <span class=\"literal\">YES</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setPosition:(<span class=\"built_in\">CGRect</span>)position</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.bounds</span> = CGRectMake(<span class=\"number\">0</span>, <span class=\"number\">0</span>, position<span class=\"variable\">.size</span><span class=\"variable\">.width</span>, position<span class=\"variable\">.size</span><span class=\"variable\">.height</span>);</div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.center</span> = CGPointMake(position<span class=\"variable\">.origin</span><span class=\"variable\">.x</span>,position<span class=\"variable\">.origin</span><span class=\"variable\">.y</span>);</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////</span></div><div class=\"line\"><span class=\"comment\">//  UIButton</span></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////</span></div><div class=\"line\"></div><div class=\"line\">+ (<span class=\"built_in\">UIButton</span>*) buttonWithTarget:(<span class=\"keyword\">id</span>)target action:(SEL)sel</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"built_in\">UIButton</span> *btn = [<span class=\"built_in\">UIButton</span> buttonWithType:UIButtonTypeCustom];</div><div class=\"line\">    [btn addTarget:target action:sel forControlEvents:UIControlEventTouchUpInside];</div><div class=\"line\">    <span class=\"keyword\">return</span> btn;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>) setTextN:(<span class=\"built_in\">NSString</span>*)n H:(<span class=\"built_in\">NSString</span>*)h D:(<span class=\"built_in\">NSString</span>*)d S:(<span class=\"built_in\">NSString</span> *)s</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">if</span> ( n )</div><div class=\"line\">    {</div><div class=\"line\">        [<span class=\"keyword\">self</span> setTitle:n forState:UIControlStateNormal];</div><div class=\"line\">    }</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> ( h )</div><div class=\"line\">    {</div><div class=\"line\">        [<span class=\"keyword\">self</span> setTitle:h forState:UIControlStateHighlighted];</div><div class=\"line\">    }</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> ( d )</div><div class=\"line\">    {</div><div class=\"line\">        [<span class=\"keyword\">self</span> setTitle:d forState:UIControlStateDisabled];</div><div class=\"line\">    }</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> ( s )</div><div class=\"line\">    {</div><div class=\"line\">        [<span class=\"keyword\">self</span> setTitle:s forState:UIControlStateSelected];</div><div class=\"line\">    }</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>) setImageN:(<span class=\"built_in\">NSString</span>*)n H:(<span class=\"built_in\">NSString</span>*)h D:(<span class=\"built_in\">NSString</span>*)d S:(<span class=\"built_in\">NSString</span> *)s</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">if</span> ( n )</div><div class=\"line\">    {</div><div class=\"line\">        [<span class=\"keyword\">self</span> setImage:[<span class=\"built_in\">UIImage</span> imageName:n] forState:UIControlStateNormal];</div><div class=\"line\">    }</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> ( h )</div><div class=\"line\">    {</div><div class=\"line\">        [<span class=\"keyword\">self</span> setImage:[<span class=\"built_in\">UIImage</span> imageName:h] forState:UIControlStateHighlighted];</div><div class=\"line\">    }</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> ( d )</div><div class=\"line\">    {</div><div class=\"line\">        [<span class=\"keyword\">self</span> setImage:[<span class=\"built_in\">UIImage</span> imageName:d] forState:UIControlStateDisabled];</div><div class=\"line\">    }</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> ( s )</div><div class=\"line\">    {</div><div class=\"line\">        [<span class=\"keyword\">self</span> setImage:[<span class=\"built_in\">UIImage</span> imageName:s] forState:UIControlStateSelected];</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> ( h )</div><div class=\"line\">        {</div><div class=\"line\">            [<span class=\"keyword\">self</span> setImage:[<span class=\"built_in\">UIImage</span> imageName:h] forState:UIControlStateHighlighted | UIControlStateSelected];</div><div class=\"line\">        }</div><div class=\"line\">        </div><div class=\"line\">    }</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////</span></div><div class=\"line\"><span class=\"comment\">//  NSString</span></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////</span></div><div class=\"line\"></div><div class=\"line\">-(<span class=\"built_in\">NSString</span> *) trimHead</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"built_in\">NSInteger</span> i;</div><div class=\"line\">    NSCharacterSet *cs = [NSCharacterSet whitespaceAndNewlineCharacterSet];</div><div class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; [<span class=\"keyword\">self</span> length]; i++)</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">if</span> ( ![cs characterIsMember: [<span class=\"keyword\">self</span> characterAtIndex: i]] ) <span class=\"keyword\">break</span>;</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> substringFromIndex: i];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"built_in\">NSString</span> *) trimTail</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"built_in\">NSInteger</span> i;</div><div class=\"line\">    NSCharacterSet *cs = [NSCharacterSet whitespaceAndNewlineCharacterSet];</div><div class=\"line\">    <span class=\"keyword\">for</span>(i = [<span class=\"keyword\">self</span> length] -<span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">if</span> ( ![cs characterIsMember: [<span class=\"keyword\">self</span> characterAtIndex: i]] ) <span class=\"keyword\">break</span>;    </div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> substringToIndex: (i+<span class=\"number\">1</span>)];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSString</span> *) trimBoth</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> [[<span class=\"keyword\">self</span> trimHead] trimTail];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSString</span>*)MD5</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ptr = [<span class=\"keyword\">self</span> UTF8String];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> md5Buffer[CC_MD5_DIGEST_LENGTH];</div><div class=\"line\">    </div><div class=\"line\">    CC_MD5(ptr, strlen(ptr), md5Buffer);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">NSMutableString</span> *output = [<span class=\"built_in\">NSMutableString</span> stringWithCapacity:CC_MD5_DIGEST_LENGTH * <span class=\"number\">2</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; CC_MD5_DIGEST_LENGTH; i++) </div><div class=\"line\">        [output appendFormat:<span class=\"string\">@\"%02x\"</span>,md5Buffer[i]];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> output;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)equals:(<span class=\"built_in\">NSString</span> *)str</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> compare:str] == NSOrderedSame;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CGFloat</span>)heightByFont:(<span class=\"built_in\">UIFont</span> *)font width:(<span class=\"built_in\">CGFloat</span>)width</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> sizeWithFont:font</div><div class=\"line\">            constrainedToSize:CGSizeMake(width, CGFLOAT_MAX)</div><div class=\"line\">                lineBreakMode:NSLineBreakByWordWrapping]<span class=\"variable\">.height</span>;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////</span></div><div class=\"line\"><span class=\"comment\">//  NSDictionary</span></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使取得的值不会使NSNull,在JSON解析的时候会有这种问题,有时候服务器返回了 {\"test\":null},但是被解析成了NSNull,这时APP这边处理起来会比较麻烦</span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)objectForKeyNotNull:(<span class=\"keyword\">id</span>)key {</div><div class=\"line\">    <span class=\"keyword\">id</span> object = [<span class=\"keyword\">self</span> objectForKey:key];</div><div class=\"line\">    <span class=\"keyword\">if</span> (object == [NSNull null])</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> object;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////</span></div><div class=\"line\"><span class=\"comment\">//  NSAttributedString</span></div><div class=\"line\"><span class=\"comment\">///////////////////////////////////////</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">CGFloat</span>)heightByWidth:(<span class=\"built_in\">CGFloat</span>)width</div><div class=\"line\">{</div><div class=\"line\">    CTFramesetterRef framesetter = CTFramesetterCreateWithAttributedString((__bridge CFAttributedStringRef)<span class=\"keyword\">self</span>);</div><div class=\"line\">    <span class=\"built_in\">CGSize</span> targetSize = CGSizeMake(width, CGFLOAT_MAX);</div><div class=\"line\">    <span class=\"built_in\">CGSize</span> fitSize = CTFramesetterSuggestFrameSizeWithConstraints(framesetter, CFRangeMake(<span class=\"number\">0</span>, [<span class=\"keyword\">self</span> length]), <span class=\"literal\">NULL</span>, targetSize, <span class=\"literal\">NULL</span>);</div><div class=\"line\">    CFRelease(framesetter);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> fitSize<span class=\"variable\">.height</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/2013-12-10-ge-ren-zong-jie-de-yi-xie-app-de-dai-ma-shi-jian.md","raw":"---\nlayout: post\ntitle: \"个人总结的一些 APP 的代码实践\"\ndate: 2013-12-10 14:56:46 +0800\ncomments: true\ncategories: 技巧心得\n---\n\n建立一个辅助的APP类,减少对AppDelegate的修改\n---------------------------------------\n\n最开始接触iOS开发的时候,如果需要一些全局变量或者全局函数的时候,总是直接在`AppDelegate`中添加,因为`AppDelegate`可以直接获取\n\n``` objc\n[UIApplication sharedApplication].delegate\n```\n\n但是时间长了还是觉得这样不太好,`AppDelegate`本身有其自己的作用(对于App本身的一些事件进行处理,如启动,切换,推送),这样做感觉怪怪的,所以还是自己弄一个专门处理我们所需的全局变亮或者全局函数的对象会更好一些\n\n\n``` objc\n\n//APPHelper.h\n@interface APPHelper\n\n+ (APPHelper*)call;\n\n- (void) configureWindow:(UIWindow*)window;\n\n@property (nonatomic, readonly) AppDelegate *delegate;\n@property (strong, readonly) UIWindow *window;\n\n@end\n\n\n//APPHelper.m\n\n@interface APPHelper ()\n\n\n@end\n\n\n@implementation APPHelper\n\n- (id)init\n{\n    self = [super init];\n\n    if (self) {\n        \n        _delegate = (GGAppDelegate*)[UIApplication sharedApplication].delegate;\n    }\n\n    return self;\n}\n\n\n+ (APPHelper *)call\n{\n    static dispatch_once_t  onceQueue;\n    static APPHelper *appInstance;\n\n    dispatch_once(&onceQueue, ^{\n        appInstance = [[APPHelper alloc] init];\n    });\n    return appInstance;\n}\n\n- (UIWindow *)window\n{\n    return self.delegate.window;\n}\n\n\n\n- (void)configureWindow:(UIWindow*)window\n{\n    \n    UINavigationController *nav = [[UINavigationController alloc] init];\n\n    ...\n    ...\n    ...\n    \n    window.rootViewController = nav;\n    \n}\n\n@end\n\n```\n\n然后 在预编译头`*.pch`中加入\n\n``` objc\n#import \"AppHelper.h\"\n\n\n#define APP ([APPHelper call])\n```\n\n就可以直接在代码的任意一个地方直接使用此类了,如\n\n``` objc\n\n    //设置APP为圆角\n    APP.window.layer.cornerRadius = 5.0f;\n    APP.window.layer.masksToBounds = YES;\n\n```\n\n\n\n\n简单的Autoresizing的宏\n---------------------------------------\n一开始我就喜欢代码布局,从来没使用过IB或者SB开发,所以如何在代码中用**Autoresizing**就显得很重要了(那个时候还没有*AutoLayout*).\n\n为此我还专门研究了一下IB(那个时候还没有SB),并把生成的nib用[nib2objc](https://github.com/akosma/nib2objc/)转换成了代码来学习.\n\n使用下面的宏,可以很轻松的实现**Autoresizing**.\n\n``` objc\n#define FlexibleT                   UIViewAutoresizingFlexibleTopMargin\n#define FlexibleB                   UIViewAutoresizingFlexibleBottomMargin\n#define FlexibleL                   UIViewAutoresizingFlexibleLeftMargin\n#define FlexibleR                   UIViewAutoresizingFlexibleRightMargin\n#define FlexibleH                   UIViewAutoresizingFlexibleHeight\n#define FlexibleW                   UIViewAutoresizingFlexibleWidth\n\n#define FixedMarginT                FlexibleW | FlexibleB\n#define FixedMarginB                FlexibleW | FlexibleT\n#define FixedMarginL                FlexibleH | FlexibleR\n#define FixedMarginR                FlexibleH | FlexibleL\n#define FixedHorizental             FlexibleW | FlexibleT | FlexibleB\n#define FixedVertical               FlexibleH | FlexibleL | FlexibleR\n#define FixedALL                    FlexibleW | FlexibleH\n#define FixedCenter                 FlexibleL | FlexibleR | FlexibleT | FlexibleB\n```\n\n使用上述的宏时,最好对`UIView`扩展一下,添加下列方法\n\n``` objc\n- (void) autoResize:(UIViewAutoresizing) type\n{\n    self.autoresizingMask = mask;\n    self.autoresizesSubviews = YES;\n}\n```\n\n使用方法如下\n\n``` objc\n\n@implementation XXXViewController\n\n- (id)init\n{\n    self = [super init];\n    if (self) {\n        // Custom initialization\n        \n        self.tableView = [[UITableView alloc] initWithFrame:self.view.bounds style:UITableViewStyleGrouped];\n        **[self.tableView autoResize:FixedALL];**    \n        self.tableView.delegate = self;\n        [self.view addSubview:self.tableView];\n        \n        ...\n        ...\n    }\n    return self;\n}\n\n```\n\n关于各个宏的作用如下\n\n||              宏             ||          含义        ||\n||:--------------------------:||:--------------------:||\n|| FixedMarginB               ||      下侧距离固定      ||\n|| FixedMarginL               ||      左侧距离固定      ||\n|| FixedMarginR               ||      右侧距离固定      ||\n|| FixedHorizental            ||      左右距离固定      ||\n|| FixedVertical              ||      上下距离固定      ||\n|| FixedALL                   ||      四周距离固定      ||\n|| FixedCenter                ||      居中             ||\n\n从这张图上我们可以看到对于各个值的含义,出自[stackoverflow](http://stackoverflow.com/questions/7754851/autoresizing-masks-programmatically-vs-interfact-builder-xib-nib)\n\n![值定义](https://dl.dropboxusercontent.com/u/433937/Blog/2013-12-10-ge-ren-zong-jie-de-%5B%3F%5D-xie-app-de-dai-ma-shi-jian1.png)\n\n\n至今为止这套宏在我的开发过程中还使用得很好,所以我也没有去研究新的`AutoLayout`(好像也比较的复杂,),不过在`Github`上有个对`AutoLayout`封装得很好的库[Masonry](https://github.com/cloudkite/Masonry),有空的时候可以研究一下\n\n\n\n\n一些常用的Category\n---------------------------------------\n\n\n``` objc\n\n\n///////////////////////////////////////\n//  UIColor\n///////////////////////////////////////\n\n//通过RGBA值(比如红色FF0000FF)生成UIColor\n+ (UIColor* ) colorWithHex:(int)color {\n    \n    float red = (color & 0xff000000) >> 24;\n    float green = (color & 0x00ff0000) >> 16;\n    float blue = (color & 0x0000ff00) >> 8;\n    float alpha = (color & 0x000000ff);\n    \n    return [UIColor colorWithRed:red/255.0 green:green/255.0 blue:blue/255.0 alpha:alpha/255.0];\n}\n\n\n\n\n///////////////////////////////////////\n//  UIImage\n///////////////////////////////////////\n\n//复制当前图片\n- (UIImage *)duplicate\n{\n    CGImageRef newCgIm = CGImageCreateCopy(self.CGImage);\n    UIImage *newImage = [UIImage imageWithCGImage:newCgIm scale:self.scale orientation:self.imageOrientation];\n    CGImageRelease(newCgIm);\n    \n    return newImage;\n}\n\n//使当前图片可拉伸\n- (UIImage *)stretched\n{\n    CGSize size = self.size;\n    \n    UIEdgeInsets insets = UIEdgeInsetsMake(truncf(size.height-1)/2, truncf(size.width-1)/2, truncf(size.height-1)/2, truncf(size.width-1)/2);\n    \n    return [self resizableImageWithCapInsets:insets];\n}\n\n//使当前图片抗锯齿(当图片在旋转时有用, 原理就是在图片周围加1px的透明像素)\n- (UIImage *)antiAlias\n{\n    int border = 1;\n    CGRect rect = CGRectMake(border, border, self.size.width-2*border, self.size.height-2*border);\n    \n    UIImage *img = nil;\n    \n    UIGraphicsBeginImageContext(CGSizeMake(rect.size.width,rect.size.height));\n    [self drawInRect:CGRectMake(-1, -1, self.size.width, self.size.height)];\n    img = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    \n    UIGraphicsBeginImageContext(self.size);\n    [img drawInRect:rect];\n    UIImage* antiImage = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    \n    return antiImage;\n}\n\n//创建纯色的图片\n+ (UIImage *)imageWithColor:(UIColor *)color Size:(CGSize)size\n{\n    CGRect rect = CGRectMake(0.0f, 0.0f, size.width, size.height);\n    UIGraphicsBeginImageContext(rect.size);\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    \n    CGContextSetFillColorWithColor(context, [color CGColor]);\n    CGContextFillRect(context, rect);\n    \n    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    \n    return [image stretched];\n}\n\n//imageNamed的非缓存版\n+ (UIImage *)imageName:(NSString *)name\n{\n    NSString *path = [[[NSBundle mainBundle] bundlePath] stringByAppendingString:[NSString stringWithFormat:@\"/%@\",name]];\n    \n    return [UIImage imageWithContentsOfFile:path];\n}\n\n\n\n\n///////////////////////////////////////\n//  UIButton\n///////////////////////////////////////\n\n- (float)x\n{\n    return self.frame.origin.x;\n}\n- (float)y\n{\n    return self.frame.origin.y;\n}\n- (float)w\n{\n    return self.frame.size.width;\n}\n- (float)h\n{\n    return self.frame.size.height;\n}\n\n- (void)setTagName:(NSString*)name\n{\n    self.tag = [name hash];\n}\n\n- (UIView *)viewWithName:(NSString *)name\n{\n    return [self viewWithTag:[name hash]];\n}\n\n- (void) autoResize:(UIViewAutoresizing)mask\n{\n    self.autoresizingMask = mask;\n    self.autoresizesSubviews = YES;\n}\n\n- (void)setPosition:(CGRect)position\n{\n    self.bounds = CGRectMake(0, 0, position.size.width, position.size.height);\n    self.center = CGPointMake(position.origin.x,position.origin.y);\n}\n\n\n\n\n///////////////////////////////////////\n//  UIButton\n///////////////////////////////////////\n\n+ (UIButton*) buttonWithTarget:(id)target action:(SEL)sel\n{\n    UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];\n    [btn addTarget:target action:sel forControlEvents:UIControlEventTouchUpInside];\n    return btn;\n}\n\n- (void) setTextN:(NSString*)n H:(NSString*)h D:(NSString*)d S:(NSString *)s\n{\n    if ( n )\n    {\n        [self setTitle:n forState:UIControlStateNormal];\n    }\n    \n    if ( h )\n    {\n        [self setTitle:h forState:UIControlStateHighlighted];\n    }\n    \n    if ( d )\n    {\n        [self setTitle:d forState:UIControlStateDisabled];\n    }\n    \n    if ( s )\n    {\n        [self setTitle:s forState:UIControlStateSelected];\n    }\n}\n\n- (void) setImageN:(NSString*)n H:(NSString*)h D:(NSString*)d S:(NSString *)s\n{\n    if ( n )\n    {\n        [self setImage:[UIImage imageName:n] forState:UIControlStateNormal];\n    }\n    \n    if ( h )\n    {\n        [self setImage:[UIImage imageName:h] forState:UIControlStateHighlighted];\n    }\n    \n    if ( d )\n    {\n        [self setImage:[UIImage imageName:d] forState:UIControlStateDisabled];\n    }\n    \n    if ( s )\n    {\n        [self setImage:[UIImage imageName:s] forState:UIControlStateSelected];\n        \n        if ( h )\n        {\n            [self setImage:[UIImage imageName:h] forState:UIControlStateHighlighted | UIControlStateSelected];\n        }\n        \n    }\n}\n\n\n\n\n///////////////////////////////////////\n//  NSString\n///////////////////////////////////////\n\n-(NSString *) trimHead\n{\n    NSInteger i;\n    NSCharacterSet *cs = [NSCharacterSet whitespaceAndNewlineCharacterSet];\n    for(i = 0; i < [self length]; i++)\n    {\n        if ( ![cs characterIsMember: [self characterAtIndex: i]] ) break;\n    }\n    return [self substringFromIndex: i];\n}\n\n-(NSString *) trimTail\n{\n    NSInteger i;\n    NSCharacterSet *cs = [NSCharacterSet whitespaceAndNewlineCharacterSet];\n    for(i = [self length] -1; i >= 0; i--)\n    {\n        if ( ![cs characterIsMember: [self characterAtIndex: i]] ) break;    \n    }\n    return [self substringToIndex: (i+1)];\n}\n\n- (NSString *) trimBoth\n{\n    return [[self trimHead] trimTail];\n}\n\n- (NSString*)MD5\n{\n    const char *ptr = [self UTF8String];\n    \n    unsigned char md5Buffer[CC_MD5_DIGEST_LENGTH];\n    \n    CC_MD5(ptr, strlen(ptr), md5Buffer);\n    \n    NSMutableString *output = [NSMutableString stringWithCapacity:CC_MD5_DIGEST_LENGTH * 2];\n    for(int i = 0; i < CC_MD5_DIGEST_LENGTH; i++) \n        [output appendFormat:@\"%02x\",md5Buffer[i]];\n    \n    return output;\n}\n\n- (BOOL)equals:(NSString *)str\n{\n    return [self compare:str] == NSOrderedSame;\n}\n\n- (CGFloat)heightByFont:(UIFont *)font width:(CGFloat)width\n{\n    return [self sizeWithFont:font\n            constrainedToSize:CGSizeMake(width, CGFLOAT_MAX)\n                lineBreakMode:NSLineBreakByWordWrapping].height;\n}\n\n\n\n\n\n///////////////////////////////////////\n//  NSDictionary\n///////////////////////////////////////\n\n//使取得的值不会使NSNull,在JSON解析的时候会有这种问题,有时候服务器返回了 {\"test\":null},但是被解析成了NSNull,这时APP这边处理起来会比较麻烦\n- (id)objectForKeyNotNull:(id)key {\n    id object = [self objectForKey:key];\n    if (object == [NSNull null])\n        return nil;\n    \n    return object;\n}\n\n\n\n\n///////////////////////////////////////\n//  NSAttributedString\n///////////////////////////////////////\n\n- (CGFloat)heightByWidth:(CGFloat)width\n{\n    CTFramesetterRef framesetter = CTFramesetterCreateWithAttributedString((__bridge CFAttributedStringRef)self);\n    CGSize targetSize = CGSizeMake(width, CGFLOAT_MAX);\n    CGSize fitSize = CTFramesetterSuggestFrameSizeWithConstraints(framesetter, CFRangeMake(0, [self length]), NULL, targetSize, NULL);\n    CFRelease(framesetter);\n    \n    return fitSize.height;\n}\n\n\n```\n","slug":"2013-12-10-ge-ren-zong-jie-de-yi-xie-app-de-dai-ma-shi-jian","updated":1386730934000,"excerpt":"","_id":"gq7r01yxncpvuyzk","tags":[],"photos":[],"link":""},{"layout":"post","title":"如何从多重 modalViewController 中直接返回最底层","date":1386658798000,"comments":true,"categories":["uik4bvz6gsyceazg"],"content":"<p><code>ModalViewController</code>是经常会用到的展现<code>ViewController</code>的方式,而显示和收起<code>ModalViewController</code>也是很简单的</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)presentViewController:(<span class=\"built_in\">UIViewController</span> *)viewControllerToPresent animated: (<span class=\"built_in\">BOOL</span>)flag completion:(<span class=\"keyword\">void</span> (^)(<span class=\"keyword\">void</span>))completion NS_AVAILABLE_IOS(<span class=\"number\">5</span>_0);</div><div class=\"line\">- (<span class=\"keyword\">void</span>)dismissViewControllerAnimated: (<span class=\"built_in\">BOOL</span>)flag completion: (<span class=\"keyword\">void</span> (^)(<span class=\"keyword\">void</span>))completion NS_AVAILABLE_IOS(<span class=\"number\">5</span>_0);</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)presentModalViewController:(<span class=\"built_in\">UIViewController</span> *)modalViewController animated:(<span class=\"built_in\">BOOL</span>)animated NS_DEPRECATED_IOS(<span class=\"number\">2</span>_0, <span class=\"number\">6</span>_0);</div><div class=\"line\">- (<span class=\"keyword\">void</span>)dismissModalViewControllerAnimated:(<span class=\"built_in\">BOOL</span>)animated NS_DEPRECATED_IOS(<span class=\"number\">2</span>_0, <span class=\"number\">6</span>_0);</div></pre></td></tr></table></figure>\n\n<p>但是有的时候我们的需求很特殊,比如在一个<code>ModalViewController</code>里要present另一个<code>ModalViewController</code>,甚至再present一个<code>ModalViewController</code>,<strong>然后</strong>可能在某个时候APP发出一条消息,需要一下子dismiss掉所有的<code>ModalViewController</code>(比如你在使用过程中,突然APP检测到你的登录状态异常,需要重新登录,这个时候所有的页面都需要消失),这时候该如何办呢?</p>\n<p>正巧我现在正在做的项目遇到了这个问题,所以研究了一下,得到了以下的解决办法:</p>\n<p>首先,必须知道现在整个APP最顶层的<code>ViewController</code>是哪个,我的做法是在每个<code>ViewController</code>的<code>viewWillAppear</code>中记录一下,当然这个操作是自动完成的,因为每个项目,我都会从<code>UIViewController</code>派生一个子类,然后再从这个子类派生所有的<code>ViewController</code>方便管理.</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">MMViewController</span> : <span class=\"title\">UIViewController</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">MMViewController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewWillAppear:(<span class=\"built_in\">BOOL</span>)animated</div><div class=\"line\">{</div><div class=\"line\">    APP<span class=\"variable\">.presentingController</span> = <span class=\"keyword\">self</span>;</div><div class=\"line\">}</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n\n<p>得到了顶层的<code>ViewController</code>以后,事情就简单了,我们只要追根溯源,找到最底层的<code>ViewController</code>就行了</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> ( APP<span class=\"variable\">.presentingController</span> )</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"built_in\">UIViewController</span> *vc = <span class=\"keyword\">self</span><span class=\"variable\">.presentingController</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> ( !vc<span class=\"variable\">.presentingViewController</span> )</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    }</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">while</span> (vc<span class=\"variable\">.presentingViewController</span>)</div><div class=\"line\">    {</div><div class=\"line\">        vc = vc<span class=\"variable\">.presentingViewController</span>;</div><div class=\"line\">    }</div><div class=\"line\">    </div><div class=\"line\">    [vc dismissViewControllerAnimated:<span class=\"literal\">YES</span> completion:^{</div><div class=\"line\"></div><div class=\"line\">    }];</div><div class=\"line\">    </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/2013-12-10-ru-he-cong-duo-zhong-modalviewcontroller-zhong-zhi-jie-fan-hui-zui-di-ceng.md","raw":"---\nlayout: post\ntitle: \"如何从多重 modalViewController 中直接返回最底层\"\ndate: 2013-12-10 14:59:58 +0800\ncomments: true\ncategories: 技巧心得\n---\n\n`ModalViewController`是经常会用到的展现`ViewController`的方式,而显示和收起`ModalViewController`也是很简单的\n\n``` objc\n\n- (void)presentViewController:(UIViewController *)viewControllerToPresent animated: (BOOL)flag completion:(void (^)(void))completion NS_AVAILABLE_IOS(5_0);\n- (void)dismissViewControllerAnimated: (BOOL)flag completion: (void (^)(void))completion NS_AVAILABLE_IOS(5_0);\n\n- (void)presentModalViewController:(UIViewController *)modalViewController animated:(BOOL)animated NS_DEPRECATED_IOS(2_0, 6_0);\n- (void)dismissModalViewControllerAnimated:(BOOL)animated NS_DEPRECATED_IOS(2_0, 6_0);\n\n```\n\n但是有的时候我们的需求很特殊,比如在一个`ModalViewController`里要present另一个`ModalViewController`,甚至再present一个`ModalViewController`,**然后**可能在某个时候APP发出一条消息,需要一下子dismiss掉所有的`ModalViewController`(比如你在使用过程中,突然APP检测到你的登录状态异常,需要重新登录,这个时候所有的页面都需要消失),这时候该如何办呢?\n\n正巧我现在正在做的项目遇到了这个问题,所以研究了一下,得到了以下的解决办法:\n\n首先,必须知道现在整个APP最顶层的`ViewController`是哪个,我的做法是在每个`ViewController`的`viewWillAppear`中记录一下,当然这个操作是自动完成的,因为每个项目,我都会从`UIViewController`派生一个子类,然后再从这个子类派生所有的`ViewController`方便管理.\n\n``` objc\n\n@interface MMViewController : UIViewController\n\n@end\n\n@implementation MMViewController\n\n- (void)viewWillAppear:(BOOL)animated\n{\n    APP.presentingController = self;\n}\n@end\n\n```\n\n得到了顶层的`ViewController`以后,事情就简单了,我们只要追根溯源,找到最底层的`ViewController`就行了\n\n``` objc\n\nif ( APP.presentingController )\n{\n    UIViewController *vc = self.presentingController;\n    \n    if ( !vc.presentingViewController )\n    {\n        return;\n    }\n    \n    while (vc.presentingViewController)\n    {\n        vc = vc.presentingViewController;\n    }\n    \n    [vc dismissViewControllerAnimated:YES completion:^{\n\n    }];\n    \n}\n\n```\n","slug":"2013-12-10-ru-he-cong-duo-zhong-modalviewcontroller-zhong-zhi-jie-fan-hui-zui-di-ceng","updated":1386753090000,"excerpt":"","_id":"3gwnuiskbw3anxod","tags":[],"photos":[],"link":""},{"layout":"post","title":"解决表单被键盘遮住的问题","date":1386730919000,"comments":true,"categories":["uik4bvz6gsyceazg"],"content":"<h1 id=\"问题\">问题</h1>\n<p>处理表单的时候,一定会碰到的就是输入控件被键盘遮住的问题,如图:</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/433937/Blog/2013-12-11-jie-jue-biao-dan-bei-jian-pan-zhe-zhu-de-wen-ti1.png\" alt=\"实例\"></p>\n<p>左边是普通表单,中间是2B表单,右边是文艺表单.</p>\n<h1 id=\"分析\">分析</h1>\n<p>处理这种问题无非就是2个步骤:</p>\n<ol>\n<li>键盘弹出时,缩小<code>UITableView</code>的<code>frame</code></li>\n<li>滚动<code>UITableView</code>,让当前输入的控件可见</li>\n</ol>\n<p>代码写出来就是这几步</p>\n<ol>\n<li>捕获键盘事件</li>\n<li>计算键盘高度并调整<code>UITableView</code>的<code>frame</code></li>\n<li>获取当前正在输入的控件</li>\n<li>计算其在<code>UITableView</code>中的位置,并滚动到其位置让其可见</li>\n</ol>\n<p>那么如何一步一步的来实现这些步骤呢?</p>\n<h2 id=\"捕获键盘事件\">捕获键盘事件</h2>\n<figure class=\"highlight objc\"><figcaption><span>捕获键盘事件</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></div><div class=\"line\">                                         selector:<span class=\"keyword\">@selector</span>(actionKeyboardShow:)</div><div class=\"line\">                                             name:UIKeyboardDidShowNotification</div><div class=\"line\">                                           object:<span class=\"literal\">nil</span>];</div><div class=\"line\">[[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></div><div class=\"line\">                                         selector:<span class=\"keyword\">@selector</span>(actionKeyboardHide:)</div><div class=\"line\">                                             name:UIKeyboardWillHideNotification</div><div class=\"line\">                                           object:<span class=\"literal\">nil</span>];</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)actionKeyboardShow:(<span class=\"built_in\">NSNotification</span> *)notification</div><div class=\"line\">{</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span> name:UIKeyboardDidShowNotification object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span> name:UIKeyboardDidChangeFrameNotification object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></div><div class=\"line\">                                             selector:<span class=\"keyword\">@selector</span>(actionKeyboardShow:)</div><div class=\"line\">                                                 name:UIKeyboardDidChangeFrameNotification</div><div class=\"line\">                                               object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    </div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)actionKeyboardHide:(<span class=\"built_in\">NSNotification</span> *)notification</div><div class=\"line\">{</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span> name:UIKeyboardDidChangeFrameNotification object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></div><div class=\"line\">                                             selector:<span class=\"keyword\">@selector</span>(actionKeyboardShow:)</div><div class=\"line\">                                                 name:UIKeyboardDidShowNotification</div><div class=\"line\">                                               object:<span class=\"literal\">nil</span>];</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"计算键盘高度并调整UITableView的frame\">计算键盘高度并调整<code>UITableView</code>的<code>frame</code></h2>\n<figure class=\"highlight objc\"><figcaption><span>计算键盘高度并调整UITableView的frame</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)actionKeyboardShow:(<span class=\"built_in\">NSNotification</span> *)notification</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"built_in\">CGSize</span> keyboardSize = [[[notification userInfo] objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue]<span class=\"variable\">.size</span></div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.tableView</span><span class=\"variable\">.frame</span> = CGRectMake(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">320</span>, <span class=\"keyword\">self</span><span class=\"variable\">.view</span><span class=\"variable\">.h</span>-keyboardSize<span class=\"variable\">.height</span>);</div><div class=\"line\">    </div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span> name:UIKeyboardDidShowNotification object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span> name:UIKeyboardDidChangeFrameNotification object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></div><div class=\"line\">                                             selector:<span class=\"keyword\">@selector</span>(actionKeyboardShow:)</div><div class=\"line\">                                                 name:UIKeyboardDidChangeFrameNotification</div><div class=\"line\">                                               object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<h2 id=\"获取当前正在输入的控件\">获取当前正在输入的控件</h2>\n<p>这里得说一句,普通程序员一般是这样来获取的</p>\n<figure class=\"highlight objc\"><figcaption><span>UIView的Category</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">UIView</span> *) getFirstResponder</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span><span class=\"variable\">.isFirstResponder</span>) {</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">    }</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">UIView</span> *subView <span class=\"keyword\">in</span> <span class=\"keyword\">self</span><span class=\"variable\">.subviews</span>) {</div><div class=\"line\">        <span class=\"built_in\">UIView</span> *firstResponder = [subView getFirstResponder];</div><div class=\"line\">        <span class=\"keyword\">if</span> (firstResponder != <span class=\"literal\">nil</span>) {</div><div class=\"line\">            <span class=\"keyword\">return</span> firstResponder;</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>虽然没错,但是文艺程序员应该<a href=\"http://stackoverflow.com/questions/5029267/is-there-any-way-of-asking-an-ios-view-which-of-its-children-has-first-responder/14135456#14135456\" target=\"_blank\" rel=\"external\">这样来获取</a></p>\n<figure class=\"highlight objc\"><figcaption><span>UIResponder的Category</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> __<span class=\"keyword\">weak</span> <span class=\"keyword\">id</span> currentFirstResponder;</div><div class=\"line\"></div><div class=\"line\">+(<span class=\"keyword\">id</span>)currentFirstResponder {</div><div class=\"line\">    currentFirstResponder = <span class=\"literal\">nil</span>;</div><div class=\"line\">    [[<span class=\"built_in\">UIApplication</span> sharedApplication] sendAction:<span class=\"keyword\">@selector</span>(findFirstResponder:) to:<span class=\"literal\">nil</span> from:<span class=\"literal\">nil</span> forEvent:<span class=\"literal\">nil</span>];</div><div class=\"line\">    <span class=\"keyword\">return</span> currentFirstResponder;</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\">-(<span class=\"keyword\">void</span>)findFirstResponder:(<span class=\"keyword\">id</span>)sender {</div><div class=\"line\">    currentFirstResponder = <span class=\"keyword\">self</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>同理,有时候我们需要让键盘消失,那么也有三种做法可以选择</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[someView resignFirstResponder];</div><div class=\"line\"></div><div class=\"line\">[<span class=\"keyword\">self</span><span class=\"variable\">.view</span> endEditing:<span class=\"literal\">YES</span>];</div><div class=\"line\"></div><div class=\"line\">[[<span class=\"built_in\">UIApplication</span> sharedApplication] sendAction:<span class=\"keyword\">@selector</span>(resignFirstResponder) to:<span class=\"literal\">nil</span> from:<span class=\"literal\">nil</span> forEvent:<span class=\"literal\">nil</span>];</div></pre></td></tr></table></figure>\n\n<p>如何选择呢? It’s up to U.</p>\n<h2 id=\"计算其在UITableView中的位置,并滚动到其位置让其可见\">计算其在<code>UITableView</code>中的位置,并滚动到其位置让其可见</h2>\n<figure class=\"highlight objc\"><figcaption><span>计算其在UITableView中的位置,并滚动到其位置让其可见</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"keyword\">void</span>)actionKeyboardShow:(<span class=\"built_in\">NSNotification</span> *)notification</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"built_in\">CGSize</span> keyboardSize = [[[notification userInfo] objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue]<span class=\"variable\">.size</span>;</div><div class=\"line\">    <span class=\"keyword\">self</span><span class=\"variable\">.tableView</span><span class=\"variable\">.frame</span> = CGRectMake(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">320</span>, <span class=\"keyword\">self</span><span class=\"variable\">.view</span><span class=\"variable\">.h</span>-keyboardSize<span class=\"variable\">.height</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">UIView</span> *v = [UIResponder currentFirstResponder];</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> ( v )</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">while</span> ( ![v isKindOfClass:[<span class=\"built_in\">UITableViewCell</span> class]]) {</div><div class=\"line\">            v = v<span class=\"variable\">.superview</span>;</div><div class=\"line\">        }</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">UITableViewCell</span> *cell = (<span class=\"built_in\">UITableViewCell</span>*)v;</div><div class=\"line\">        </div><div class=\"line\">        [<span class=\"keyword\">self</span><span class=\"variable\">.tableView</span> scrollToRowAtIndexPath:[<span class=\"keyword\">self</span><span class=\"variable\">.tableView</span> indexPathForRowAtPoint:cell<span class=\"variable\">.center</span>] atScrollPosition:UITableViewScrollPositionBottom animated:<span class=\"literal\">YES</span>];</div><div class=\"line\">    }</div><div class=\"line\">    </div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span> name:UIKeyboardDidShowNotification object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] removeObserver:<span class=\"keyword\">self</span> name:UIKeyboardDidChangeFrameNotification object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    [[<span class=\"built_in\">NSNotificationCenter</span> defaultCenter] addObserver:<span class=\"keyword\">self</span></div><div class=\"line\">                                             selector:<span class=\"keyword\">@selector</span>(actionKeyboardShow:)</div><div class=\"line\">                                                 name:UIKeyboardDidChangeFrameNotification</div><div class=\"line\">                                               object:<span class=\"literal\">nil</span>];</div><div class=\"line\">    </div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/2013-12-11-jie-jue-biao-dan-bei-jian-pan-zhe-zhu-de-wen-ti.md","raw":"---\nlayout: post\ntitle: \"解决表单被键盘遮住的问题\"\ndate: 2013-12-11 11:01:59 +0800\ncomments: true\ncategories: 技巧心得\n---\n\n问题\n=================\n\n处理表单的时候,一定会碰到的就是输入控件被键盘遮住的问题,如图:\n\n![实例](https://dl.dropboxusercontent.com/u/433937/Blog/2013-12-11-jie-jue-biao-dan-bei-jian-pan-zhe-zhu-de-wen-ti1.png)\n\n左边是普通表单,中间是2B表单,右边是文艺表单.\n\n分析\n=================\n处理这种问题无非就是2个步骤:\n\n1. 键盘弹出时,缩小`UITableView`的`frame`\n2. 滚动`UITableView`,让当前输入的控件可见\n\n代码写出来就是这几步\n\n1. 捕获键盘事件\n2. 计算键盘高度并调整`UITableView`的`frame`\n3. 获取当前正在输入的控件\n4. 计算其在`UITableView`中的位置,并滚动到其位置让其可见\n\n那么如何一步一步的来实现这些步骤呢?\n\n捕获键盘事件\n-----------------\n``` objc 捕获键盘事件\n[[NSNotificationCenter defaultCenter] addObserver:self\n                                         selector:@selector(actionKeyboardShow:)\n                                             name:UIKeyboardDidShowNotification\n                                           object:nil];\n[[NSNotificationCenter defaultCenter] addObserver:self\n                                         selector:@selector(actionKeyboardHide:)\n                                             name:UIKeyboardWillHideNotification\n                                           object:nil];\n\n- (void)actionKeyboardShow:(NSNotification *)notification\n{\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardDidShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardDidChangeFrameNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(actionKeyboardShow:)\n                                                 name:UIKeyboardDidChangeFrameNotification\n                                               object:nil];\n    \n}\n\n- (void)actionKeyboardHide:(NSNotification *)notification\n{\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardDidChangeFrameNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(actionKeyboardShow:)\n                                                 name:UIKeyboardDidShowNotification\n                                               object:nil];\n}\n\n```\n\n计算键盘高度并调整`UITableView`的`frame`\n-----------------\n``` objc 计算键盘高度并调整UITableView的frame\n- (void)actionKeyboardShow:(NSNotification *)notification\n{\n    CGSize keyboardSize = [[[notification userInfo] objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue].size\n    self.tableView.frame = CGRectMake(0, 0, 320, self.view.h-keyboardSize.height);\n    \n    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardDidShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardDidChangeFrameNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(actionKeyboardShow:)\n                                                 name:UIKeyboardDidChangeFrameNotification\n                                               object:nil];\n    \n}\n```\n\n获取当前正在输入的控件\n-----------------\n\n这里得说一句,普通程序员一般是这样来获取的\n\n``` objc UIView的Category\n- (UIView *) getFirstResponder\n{\n    if (self.isFirstResponder) {\n        return self;\n    }\n    \n    for (UIView *subView in self.subviews) {\n        UIView *firstResponder = [subView getFirstResponder];\n        if (firstResponder != nil) {\n            return firstResponder;\n        }\n    }\n    \n    return nil;\n}\n```\n\n虽然没错,但是文艺程序员应该[这样来获取](http://stackoverflow.com/questions/5029267/is-there-any-way-of-asking-an-ios-view-which-of-its-children-has-first-responder/14135456#14135456)\n\n``` objc UIResponder的Category\nstatic __weak id currentFirstResponder;\n\n+(id)currentFirstResponder {\n    currentFirstResponder = nil;\n    [[UIApplication sharedApplication] sendAction:@selector(findFirstResponder:) to:nil from:nil forEvent:nil];\n    return currentFirstResponder;\n}\n\n-(void)findFirstResponder:(id)sender {\n    currentFirstResponder = self;\n}\n\n```\n\n\n同理,有时候我们需要让键盘消失,那么也有三种做法可以选择\n\n``` objc\n[someView resignFirstResponder];\n\n[self.view endEditing:YES];\n\n[[UIApplication sharedApplication] sendAction:@selector(resignFirstResponder) to:nil from:nil forEvent:nil];\n```\n\n如何选择呢? It's up to U.\n\n计算其在`UITableView`中的位置,并滚动到其位置让其可见\n-----------------\n``` objc 计算其在UITableView中的位置,并滚动到其位置让其可见\n- (void)actionKeyboardShow:(NSNotification *)notification\n{\n    CGSize keyboardSize = [[[notification userInfo] objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue].size;\n    self.tableView.frame = CGRectMake(0, 0, 320, self.view.h-keyboardSize.height);\n    \n    UIView *v = [UIResponder currentFirstResponder];\n    \n    if ( v )\n    {\n        while ( ![v isKindOfClass:[UITableViewCell class]]) {\n            v = v.superview;\n        }\n        \n        UITableViewCell *cell = (UITableViewCell*)v;\n        \n        [self.tableView scrollToRowAtIndexPath:[self.tableView indexPathForRowAtPoint:cell.center] atScrollPosition:UITableViewScrollPositionBottom animated:YES];\n    }\n    \n    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardDidShowNotification object:nil];\n    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardDidChangeFrameNotification object:nil];\n    [[NSNotificationCenter defaultCenter] addObserver:self\n                                             selector:@selector(actionKeyboardShow:)\n                                                 name:UIKeyboardDidChangeFrameNotification\n                                               object:nil];\n    \n}\n```\n","slug":"2013-12-11-jie-jue-biao-dan-bei-jian-pan-zhe-zhu-de-wen-ti","updated":1386737804000,"excerpt":"","_id":"k5ywp3etn93ok4l6","tags":[],"photos":[],"link":""},{"layout":"post","title":"完美解决 interactivePopGestureRecognizer 卡住的问题","date":1386836350000,"comments":true,"categories":[],"keywords":null,"description":null,"published":false,"content":"<p><code>interactivePopGestureRecognizer</code>是iOS7推出的解决<code>VeiwController</code>滑动后退的新功能,虽然很实用,但是坑也很多啊,用过的同学肯定知道问题在哪里,所以具体问题我就不描述了,这里只给出如何完美解决<code>interactivePopGestureRecognizer</code>卡住的问题.</p>\n<p>当然我们要自定义UINavigationController来解决这个问题:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">GGNavigationController</span> : <span class=\"title\">UINavigationController</span></span></div><div class=\"line\">&lt;</div><div class=\"line\">UINavigationControllerDelegate,</div><div class=\"line\">UIGestureRecognizerDelegate</div><div class=\"line\">&gt;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">GGNavigationController</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)viewDidLoad</div><div class=\"line\">{</div><div class=\"line\">    NSFUNC;</div><div class=\"line\">    [<span class=\"keyword\">super</span> viewDidLoad];</div><div class=\"line\">    </div><div class=\"line\">    __<span class=\"keyword\">weak</span> GGNavigationController *weakSelf = <span class=\"keyword\">self</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> respondsToSelector:<span class=\"keyword\">@selector</span>(interactivePopGestureRecognizer)])</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">self</span><span class=\"variable\">.interactivePopGestureRecognizer</span><span class=\"variable\">.delegate</span> = weakSelf;</div><div class=\"line\">        <span class=\"keyword\">self</span><span class=\"variable\">.delegate</span> = weakSelf;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//初始时如果只有一个viewController,也要禁用此手势,不然在屏幕左划一下以后,就会卡住</span></div><div class=\"line\">        <span class=\"keyword\">self</span><span class=\"variable\">.interactivePopGestureRecognizer</span><span class=\"variable\">.enabled</span> = (<span class=\"keyword\">self</span><span class=\"variable\">.viewControllers</span><span class=\"variable\">.count</span> &gt; <span class=\"number\">1</span>);</div><div class=\"line\">    }</div><div class=\"line\">}</div><div class=\"line\">- (<span class=\"keyword\">void</span>)pushViewController:(<span class=\"built_in\">UIViewController</span> *)viewController animated:(<span class=\"built_in\">BOOL</span>)animated</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"comment\">//在push的过程中一定要禁用此手势才不会卡住</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> respondsToSelector:<span class=\"keyword\">@selector</span>(interactivePopGestureRecognizer)])</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">self</span><span class=\"variable\">.interactivePopGestureRecognizer</span><span class=\"variable\">.enabled</span> = <span class=\"literal\">NO</span>;</div><div class=\"line\">    }</div><div class=\"line\">    </div><div class=\"line\">    [<span class=\"keyword\">super</span> pushViewController:viewController animated:animated];</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#pragma mark UINavigationControllerDelegate</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)navigationController:(<span class=\"built_in\">UINavigationController</span> *)navigationController</div><div class=\"line\">       didShowViewController:(<span class=\"built_in\">UIViewController</span> *)viewController</div><div class=\"line\">                    animated:(<span class=\"built_in\">BOOL</span>)animate</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> respondsToSelector:<span class=\"keyword\">@selector</span>(interactivePopGestureRecognizer)])</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"comment\">//当Nav里只有一个viewController时 必须禁止手势 不然会卡住</span></div><div class=\"line\">        <span class=\"keyword\">self</span><span class=\"variable\">.interactivePopGestureRecognizer</span><span class=\"variable\">.enabled</span> = (<span class=\"keyword\">self</span><span class=\"variable\">.viewControllers</span><span class=\"variable\">.count</span> &gt; <span class=\"number\">1</span>);</div><div class=\"line\">    }</div><div class=\"line\">}</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n\n","source":"_posts/2013-12-12-wan-mei-jie-jue-interactivepopgesturerecognizer-qia-zhu-de-wen-ti.md","raw":"---\nlayout: post\ntitle: \"完美解决 interactivePopGestureRecognizer 卡住的问题\"\ndate: 2013-12-12 16:19:10 +0800\ncomments: true\ncategories: \nkeywords: \ndescription: \npublished: false\n---\n\n`interactivePopGestureRecognizer`是iOS7推出的解决`VeiwController`滑动后退的新功能,虽然很实用,但是坑也很多啊,用过的同学肯定知道问题在哪里,所以具体问题我就不描述了,这里只给出如何完美解决`interactivePopGestureRecognizer`卡住的问题.\n\n当然我们要自定义UINavigationController来解决这个问题:\n\n``` objc\n\n@interface GGNavigationController : UINavigationController\n<\nUINavigationControllerDelegate,\nUIGestureRecognizerDelegate\n>\n@end\n\n@implementation GGNavigationController\n\n- (void)viewDidLoad\n{\n    NSFUNC;\n    [super viewDidLoad];\n    \n    __weak GGNavigationController *weakSelf = self;\n    \n    if ([self respondsToSelector:@selector(interactivePopGestureRecognizer)])\n    {\n        self.interactivePopGestureRecognizer.delegate = weakSelf;\n        self.delegate = weakSelf;\n\n        //初始时如果只有一个viewController,也要禁用此手势,不然在屏幕左划一下以后,就会卡住\n        self.interactivePopGestureRecognizer.enabled = (self.viewControllers.count > 1);\n    }\n}\n- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated\n{\n    //在push的过程中一定要禁用此手势才不会卡住\n    if ([self respondsToSelector:@selector(interactivePopGestureRecognizer)])\n    {\n        self.interactivePopGestureRecognizer.enabled = NO;\n    }\n    \n    [super pushViewController:viewController animated:animated];\n}\n\n#pragma mark UINavigationControllerDelegate\n\n- (void)navigationController:(UINavigationController *)navigationController\n       didShowViewController:(UIViewController *)viewController\n                    animated:(BOOL)animate\n{\n    if ([self respondsToSelector:@selector(interactivePopGestureRecognizer)])\n    {\n        //当Nav里只有一个viewController时 必须禁止手势 不然会卡住\n        self.interactivePopGestureRecognizer.enabled = (self.viewControllers.count > 1);\n    }\n}\n\n@end\n\n```","slug":"2013-12-12-wan-mei-jie-jue-interactivepopgesturerecognizer-qia-zhu-de-wen-ti","updated":1386837738000,"excerpt":"","_id":"3okmchpqgc13jfm9","tags":[],"photos":[],"link":""},{"layout":"post","title":"解决表单被键盘遮住的问题(续)","date":1387441894000,"comments":true,"categories":[],"keywords":null,"description":null,"content":"<p>刚才检查代码的时候 发现了之前代码的一些问题 这里做一下修正 为此我为UIView和UITableView各新增了一个Category方法</p>\n<figure class=\"highlight objc\"><figcaption><span>UIView的Category</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>) haveSubview:(<span class=\"built_in\">UIView</span>*)subView</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"built_in\">UIView</span> *v = subView;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">while</span> (v)</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"keyword\">self</span> == v )</div><div class=\"line\">        {</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</div><div class=\"line\">        }</div><div class=\"line\">        </div><div class=\"line\">        v = v<span class=\"variable\">.superview</span>;</div><div class=\"line\">    }</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NO</span>;</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight objc\"><figcaption><span>UITableVIew的Category方法</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (<span class=\"built_in\">BOOL</span>) haveSubview:(<span class=\"built_in\">UIView</span>*)subView</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"keyword\">if</span> ( v && [<span class=\"keyword\">self</span> haveSubview:v] )</div><div class=\"line\">    {</div><div class=\"line\">        <span class=\"keyword\">while</span> ( v && ![[v class] isSubclassOfClass:[<span class=\"built_in\">UITableViewCell</span> class]]) {</div><div class=\"line\">            v = v<span class=\"variable\">.superview</span>;</div><div class=\"line\">        }</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> ( v )</div><div class=\"line\">        {</div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,NSStringFromClass(v<span class=\"variable\">.class</span>));</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"built_in\">UITableViewCell</span> *cell = (<span class=\"built_in\">UITableViewCell</span>*)v;</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%@\"</span>,[<span class=\"keyword\">self</span> indexPathForCell:cell]);</div><div class=\"line\">            </div><div class=\"line\">            [<span class=\"keyword\">self</span> scrollToRowAtIndexPath:[<span class=\"keyword\">self</span> indexPathForRowAtPoint:cell<span class=\"variable\">.center</span>] atScrollPosition:UITableViewScrollPositionBottom animated:<span class=\"literal\">YES</span>];</div><div class=\"line\">        }</div><div class=\"line\">    }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p>这样 当我们需要处理弹出键盘时 就只需要如此调用就可以了</p>\n<figure class=\"highlight objc\"><figcaption><span>调用方法</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">UIView</span> *v = [UIResponder currentFirstResponder];</div><div class=\"line\">[<span class=\"keyword\">self</span><span class=\"variable\">.tableView</span> scrollToView:v];</div></pre></td></tr></table></figure>\n\n","source":"_posts/2013-12-19-jie-jue-biao-dan-bei-jian-pan-zhe-zhu-de-wen-ti-xu.md","raw":"---\nlayout: post\ntitle: \"解决表单被键盘遮住的问题(续)\"\ndate: 2013-12-19 16:31:34 +0800\ncomments: true\ncategories: \nkeywords: \ndescription: \n---\n\n刚才检查代码的时候 发现了之前代码的一些问题 这里做一下修正 为此我为UIView和UITableView各新增了一个Category方法\n\n``` objc UIView的Category\n- (BOOL) haveSubview:(UIView*)subView\n{\n    UIView *v = subView;\n    \n    while (v)\n    {\n        if ( self == v )\n        {\n            return YES;\n        }\n        \n        v = v.superview;\n    }\n    \n    return NO;\n}\n```\n\n\n``` objc UITableVIew的Category方法\n- (BOOL) haveSubview:(UIView*)subView\n{\n    if ( v && [self haveSubview:v] )\n    {\n        while ( v && ![[v class] isSubclassOfClass:[UITableViewCell class]]) {\n            v = v.superview;\n        }\n        \n        if ( v )\n        {\n            NSLog(@\"%@\",NSStringFromClass(v.class));\n            \n            UITableViewCell *cell = (UITableViewCell*)v;\n            \n            NSLog(@\"%@\",[self indexPathForCell:cell]);\n            \n            [self scrollToRowAtIndexPath:[self indexPathForRowAtPoint:cell.center] atScrollPosition:UITableViewScrollPositionBottom animated:YES];\n        }\n    }\n}\n```\n\n这样 当我们需要处理弹出键盘时 就只需要如此调用就可以了\n\n``` objc 调用方法\nUIView *v = [UIResponder currentFirstResponder];\n[self.tableView scrollToView:v];\n```\n\n\n","slug":"2013-12-19-jie-jue-biao-dan-bei-jian-pan-zhe-zhu-de-wen-ti-xu","updated":1387442155000,"excerpt":"","_id":"nfeljs4qned3yzuu","tags":[],"photos":[],"link":""},{"layout":"post","title":"开源项目:MMSpinImageView 用于360度显示环拍物体","date":1388467493000,"comments":true,"categories":["yodrozp745kl5k57"],"keywords":null,"description":null,"content":"<p>在Github上开源了一个小玩意 <a href=\"https://github.com/adad184/MMSpinImageView\" target=\"_blank\" rel=\"external\">MMSpinImageView</a></p>\n<p>使用方法 可以用Delegate的方式,也可以直接设置一个包含UIImage的NSArray,或者直接从ZIP包里读取(需要其他类库支持)</p>\n<p>第一版本很简单 基于UIImageView来显示图片 如果有性能问题 会考虑用绘制的方法来实现</p>\n<p><img src=\"https://github.com/adad184/MMSpinImageView/blob/master/Image/demo.gif?raw=true\" alt=\"demo\"></p>\n","source":"_posts/2013-12-31-kai-yuan-xiang-mu-mmspinimageview-yong-yu-360-du-xian-shi-huan-pai-wu-ti.md","raw":"---\nlayout: post\ntitle: \"开源项目:MMSpinImageView 用于360度显示环拍物体\"\ndate: 2013-12-31 13:24:53 +0800\ncomments: true\ncategories: 开源项目\nkeywords: \ndescription: \n---\n\n在Github上开源了一个小玩意 [MMSpinImageView](https://github.com/adad184/MMSpinImageView)\n\n使用方法 可以用Delegate的方式,也可以直接设置一个包含UIImage的NSArray,或者直接从ZIP包里读取(需要其他类库支持)\n\n第一版本很简单 基于UIImageView来显示图片 如果有性能问题 会考虑用绘制的方法来实现\n\n![demo](https://github.com/adad184/MMSpinImageView/blob/master/Image/demo.gif?raw=true)","slug":"2013-12-31-kai-yuan-xiang-mu-mmspinimageview-yong-yu-360-du-xian-shi-huan-pai-wu-ti","updated":1388467862000,"excerpt":"","_id":"22sw9o7mw2hvatve","tags":[],"photos":[],"link":""},{"layout":"post","title":"开源项目:MMPlaceHolder","date":1408594634000,"comments":true,"categories":["uik4bvz6gsyceazg"],"keywords":null,"description":null,"content":"<h1 id=\"前言\">前言</h1>\n<p>最近在做一个新的项目 免不了又要跟UI打交道 之前N多的经验告诉我 为了达到设计图上的100%Copy 避免不了在切图的<code>尺寸</code>和<code>位置</code>上花大量的时间 (为什么不按美术切给你的尺寸来? 这… 只能说美术很难跟我达到天人合一… ( ͡° ͜ʖ ͡°)</p>\n<p>那么能不能以实际的效果告诉设计师尺寸和位置呢?  如下面这样就皆大欢喜啦</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/433937/Blog/2014-08-21-kai-yuan-xiang-mu-mmplaceholder-1.png\" alt=\"效果\"></p>\n<p>当然 很早之前就已经有前人做过这种事情了 比如</p>\n<p><a href=\"https://github.com/dhennessy/PAPlaceholder\" target=\"_blank\" rel=\"external\">PAPlaceholder</a><br><a href=\"https://github.com/midnightSuyama/Masu\" target=\"_blank\" rel=\"external\">Masu</a>  </p>\n<p>但是呢 共同的特点就是<code>难用</code>(怎么难用? 可以自己看一下他们的文档)</p>\n<p>所以呢 处于好玩的目的 就自己写了一个简单易用的版本(怎么简单? 一行代码就搞定啦)</p>\n<h1 id=\"介绍\">介绍</h1>\n<p><a href=\"https://github.com/adad184/MMPlaceHolder\" target=\"_blank\" rel=\"external\">MMPlaceHolder</a> </p>\n<ul>\n<li>一行代码解决显示问题 简单易用</li>\n<li>搭建码农和设计之间的沟通桥梁 减少沟通成本(Talk is cheap. Show me the code.)</li>\n<li>显示大小自适应(最小支持30*30哦)</li>\n</ul>\n<h1 id=\"使用\">使用</h1>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)showPlaceHolder;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)showPlaceHolderWithLineColor:(<span class=\"built_in\">UIColor</span>*)lineColor;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)showPlaceHolderWithLineColor:(<span class=\"built_in\">UIColor</span>*)lineColor backColor:(<span class=\"built_in\">UIColor</span>*)backColor;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)showPlaceHolderWithLineColor:(<span class=\"built_in\">UIColor</span>*)lineColor backColor:(<span class=\"built_in\">UIColor</span>*)backColor arrowSize:(<span class=\"built_in\">CGFloat</span>)arrowSize;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)hidePlaceHolder;</div><div class=\"line\">- (MMPlaceHolder *)getPlaceHolder;</div></pre></td></tr></table></figure>\n\n","source":"_posts/2014-08-21-kai-yuan-xiang-mu-mmplaceholder.md","raw":"---\nlayout: post\ntitle: \"开源项目:MMPlaceHolder\"\ndate: 2014-08-21 12:17:14 +0800\ncomments: true\ncategories: 技巧心得 \nkeywords: \ndescription: \n---\n\n\n前言\n========\n\n最近在做一个新的项目 免不了又要跟UI打交道 之前N多的经验告诉我 为了达到设计图上的100%Copy 避免不了在切图的`尺寸`和`位置`上花大量的时间 (为什么不按美术切给你的尺寸来? 这... 只能说美术很难跟我达到天人合一... ( ͡° ͜ʖ ͡°)\n\n那么能不能以实际的效果告诉设计师尺寸和位置呢?  如下面这样就皆大欢喜啦\n\n![效果](https://dl.dropboxusercontent.com/u/433937/Blog/2014-08-21-kai-yuan-xiang-mu-mmplaceholder-1.png)\n\n当然 很早之前就已经有前人做过这种事情了 比如\n\n[PAPlaceholder](https://github.com/dhennessy/PAPlaceholder) \n[Masu](https://github.com/midnightSuyama/Masu)  \n\n但是呢 共同的特点就是`难用`(怎么难用? 可以自己看一下他们的文档)\n\n所以呢 处于好玩的目的 就自己写了一个简单易用的版本(怎么简单? 一行代码就搞定啦)\n\n介绍\n=======\n\n[MMPlaceHolder](https://github.com/adad184/MMPlaceHolder) \n\n* 一行代码解决显示问题 简单易用\n* 搭建码农和设计之间的沟通桥梁 减少沟通成本(Talk is cheap. Show me the code.)\n* 显示大小自适应(最小支持30*30哦)\n\n使用\n=======\n\n``` objc\n\n- (void)showPlaceHolder;\n- (void)showPlaceHolderWithLineColor:(UIColor*)lineColor;\n- (void)showPlaceHolderWithLineColor:(UIColor*)lineColor backColor:(UIColor*)backColor;\n- (void)showPlaceHolderWithLineColor:(UIColor*)lineColor backColor:(UIColor*)backColor arrowSize:(CGFloat)arrowSize;\n\n- (void)hidePlaceHolder;\n- (MMPlaceHolder *)getPlaceHolder;\n\n```\n\n\n\n\n","slug":"2014-08-21-kai-yuan-xiang-mu-mmplaceholder","updated":1408605215000,"excerpt":"","_id":"7azo9zptcg5ny3fx","tags":[],"photos":[],"link":""},{"layout":"post","title":"如何快速的删除mac上imessage里的(垃圾)信息","date":1409014294000,"comments":true,"categories":[],"keywords":null,"description":null,"content":"<h1 id=\"前言\">前言</h1>\n<p>imessage现在处于一个非常鸡肋的状态 开了无用 关了可惜 而且貌似跟中国的运营商还有点点冲突(经常各种群发短信的时候夹杂着imessage 对方就收不到) </p>\n<p>当然有垃圾就要清除 手机上还好 看到了顺手左划就删掉了 但是倒霉的是在mac不会同步被删除 而且万一你从没没用过mac上的<code>Messages</code>这个服务 赶紧去点开 有惊喜</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/433937/Blog/2014-08-26-ru-he-kuai-su-de-shan-chu-imessageli-de-xin-xi2.png\" alt=\"imessage\"></p>\n<p>恩 是的 你肯定发现这个东东已经成了各种小广告的垃圾场</p>\n<p><img src=\"https://dl.dropboxusercontent.com/u/433937/Blog/2014-08-26-ru-he-kuai-su-de-shan-chu-imessageli-de-xin-xi.png\" alt=\"imessage\"></p>\n<p>ok 是时候准备删除了(强迫症你别理我) 于是 点X - 确认删除 - 点X - 确认删除 …… 当重复了十几遍以后 你会觉得这样太煞笔了 这几百条的垃圾 删除到什么时候去?  shift批量选择? 你试试支持么(这个特性不支持确实有点不合理)</p>\n<p>那么如何快速的删除imessage里的信息呢?</p>\n<h1 id=\"方法\">方法</h1>\n<ul>\n<li>方法一 快速删除单条记录</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">组合键 option+command+delete(大的那个 小键盘不管用)</div></pre></td></tr></table></figure>\n\n<p>这样可以快速的删除单挑 好处是可以选择要保留的</p>\n<ul>\n<li>方法二 快速清空所有记录</li>\n</ul>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">退出messages应用</div><div class=\"line\">rm -r ~/Library/Messages/chat.*</div><div class=\"line\">重启messages</div></pre></td></tr></table></figure>\n\n\n<p>据说这个方法可以清空所有信息 但是由于我测试的时候没有推出messages就直接删除文件了 导致我重启了以后所有信息都还在(汗 这是为什么 明明文件删除了) 所以我不确定这个方法是否在10.9上面还有效</p>\n","source":"_posts/2014-08-26-ru-he-kuai-su-de-shan-chu-imessageli-de-xin-xi.md","raw":"---\nlayout: post\ntitle: \"如何快速的删除mac上imessage里的(垃圾)信息\"\ndate: 2014-08-26 08:51:34 +0800\ncomments: true\ncategories: \nkeywords: \ndescription: \n---\n\n前言\n========\n\nimessage现在处于一个非常鸡肋的状态 开了无用 关了可惜 而且貌似跟中国的运营商还有点点冲突(经常各种群发短信的时候夹杂着imessage 对方就收不到) \n\n当然有垃圾就要清除 手机上还好 看到了顺手左划就删掉了 但是倒霉的是在mac不会同步被删除 而且万一你从没没用过mac上的`Messages`这个服务 赶紧去点开 有惊喜\n\n![imessage](https://dl.dropboxusercontent.com/u/433937/Blog/2014-08-26-ru-he-kuai-su-de-shan-chu-imessageli-de-xin-xi2.png)\n\n恩 是的 你肯定发现这个东东已经成了各种小广告的垃圾场\n\n![imessage](https://dl.dropboxusercontent.com/u/433937/Blog/2014-08-26-ru-he-kuai-su-de-shan-chu-imessageli-de-xin-xi.png)\n\nok 是时候准备删除了(强迫症你别理我) 于是 点X - 确认删除 - 点X - 确认删除 ...... 当重复了十几遍以后 你会觉得这样太煞笔了 这几百条的垃圾 删除到什么时候去?  shift批量选择? 你试试支持么(这个特性不支持确实有点不合理)\n\n那么如何快速的删除imessage里的信息呢?\n\n\n方法\n========\n\n* 方法一 快速删除单条记录\n\n``` objc\n\t组合键 option+command+delete(大的那个 小键盘不管用)\n```\n\n这样可以快速的删除单挑 好处是可以选择要保留的\n\n* 方法二 快速清空所有记录\n\n```objc\n    退出messages应用\n    rm -r ~/Library/Messages/chat.*\n    重启messages\n```\n    \n据说这个方法可以清空所有信息 但是由于我测试的时候没有推出messages就直接删除文件了 导致我重启了以后所有信息都还在(汗 这是为什么 明明文件删除了) 所以我不确定这个方法是否在10.9上面还有效\n    \n","slug":"2014-08-26-ru-he-kuai-su-de-shan-chu-imessageli-de-xin-xi","updated":1409018523000,"excerpt":"","_id":"709k1jiazuatzo55","tags":[],"photos":[],"link":""}],"Tag":[]}